<?php
/**
 * InlineResponse452Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Encompass Supply Chain Solutions
 *
 * Services require a user name and password that must be obtained from Encompass.  We issue a single set of credentials for all invironments.  Please make sure you are pointing to the correct endpoint described in the __servers__ section.  Services all return the elements `status->errorCode` and `status->errorMessage`.  Successful reqeusts will return a __100__ `errorCode`.   If you have any questions that are not answered here or would like to discuss the overall process, please contact your account rep to schedule a technical call.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Encompass\SDK\Model;

use \ArrayAccess;
use \Encompass\SDK\ObjectSerializer;

/**
 * InlineResponse452Data Class Doc Comment
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse452Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_452_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'variation_name' => 'string',
'variation_image' => 'string',
'variations' => 'object[]',
'service_manual_url' => 'string',
'exploded_view_url' => 'string',
'small_image_url' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'variation_name' => null,
'variation_image' => null,
'variations' => null,
'service_manual_url' => null,
'exploded_view_url' => null,
'small_image_url' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'variation_name' => 'variationName',
'variation_image' => 'variationImage',
'variations' => 'variations',
'service_manual_url' => 'serviceManualUrl',
'exploded_view_url' => 'explodedViewUrl',
'small_image_url' => 'smallImageURL'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'variation_name' => 'setVariationName',
'variation_image' => 'setVariationImage',
'variations' => 'setVariations',
'service_manual_url' => 'setServiceManualUrl',
'exploded_view_url' => 'setExplodedViewUrl',
'small_image_url' => 'setSmallImageUrl'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'variation_name' => 'getVariationName',
'variation_image' => 'getVariationImage',
'variations' => 'getVariations',
'service_manual_url' => 'getServiceManualUrl',
'exploded_view_url' => 'getExplodedViewUrl',
'small_image_url' => 'getSmallImageUrl'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['variation_name'] = isset($data['variation_name']) ? $data['variation_name'] : null;
        $this->container['variation_image'] = isset($data['variation_image']) ? $data['variation_image'] : null;
        $this->container['variations'] = isset($data['variations']) ? $data['variations'] : null;
        $this->container['service_manual_url'] = isset($data['service_manual_url']) ? $data['service_manual_url'] : null;
        $this->container['exploded_view_url'] = isset($data['exploded_view_url']) ? $data['exploded_view_url'] : null;
        $this->container['small_image_url'] = isset($data['small_image_url']) ? $data['small_image_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets variation_name
     *
     * @return string
     */
    public function getVariationName()
    {
        return $this->container['variation_name'];
    }

    /**
     * Sets variation_name
     *
     * @param string $variation_name This will be what this manufacturer calls this modelVariation.  Some manufacturers use different names.
     *
     * @return $this
     */
    public function setVariationName($variation_name)
    {
        $this->container['variation_name'] = $variation_name;

        return $this;
    }

    /**
     * Gets variation_image
     *
     * @return string
     */
    public function getVariationImage()
    {
        return $this->container['variation_image'];
    }

    /**
     * Sets variation_image
     *
     * @param string $variation_image This image will show an example label to help the user find the correct information.
     *
     * @return $this
     */
    public function setVariationImage($variation_image)
    {
        $this->container['variation_image'] = $variation_image;

        return $this;
    }

    /**
     * Gets variations
     *
     * @return object[]
     */
    public function getVariations()
    {
        return $this->container['variations'];
    }

    /**
     * Sets variations
     *
     * @param object[] $variations array of model variations to pick from and send back to the service
     *
     * @return $this
     */
    public function setVariations($variations)
    {
        $this->container['variations'] = $variations;

        return $this;
    }

    /**
     * Gets service_manual_url
     *
     * @return string
     */
    public function getServiceManualUrl()
    {
        return $this->container['service_manual_url'];
    }

    /**
     * Sets service_manual_url
     *
     * @param string $service_manual_url service_manual_url
     *
     * @return $this
     */
    public function setServiceManualUrl($service_manual_url)
    {
        $this->container['service_manual_url'] = $service_manual_url;

        return $this;
    }

    /**
     * Gets exploded_view_url
     *
     * @return string
     */
    public function getExplodedViewUrl()
    {
        return $this->container['exploded_view_url'];
    }

    /**
     * Sets exploded_view_url
     *
     * @param string $exploded_view_url exploded_view_url
     *
     * @return $this
     */
    public function setExplodedViewUrl($exploded_view_url)
    {
        $this->container['exploded_view_url'] = $exploded_view_url;

        return $this;
    }

    /**
     * Gets small_image_url
     *
     * @return string
     */
    public function getSmallImageUrl()
    {
        return $this->container['small_image_url'];
    }

    /**
     * Sets small_image_url
     *
     * @param string $small_image_url small_image_url
     *
     * @return $this
     */
    public function setSmallImageUrl($small_image_url)
    {
        $this->container['small_image_url'] = $small_image_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
