<?php
/**
 * RestfulservicecreateOrderDataParts
 *
 * PHP version 5
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Encompass Supply Chain Solutions
 *
 * Services require a user name and password that must be obtained from Encompass.  We issue a single set of credentials for all invironments.  Please make sure you are pointing to the correct endpoint described in the __servers__ section.  Services all return the elements `status->errorCode` and `status->errorMessage`.  Successful reqeusts will return a __100__ `errorCode`.   If you have any questions that are not answered here or would like to discuss the overall process, please contact your account rep to schedule a technical call.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Encompass\SDK\Model;

use \ArrayAccess;
use \Encompass\SDK\ObjectSerializer;

/**
 * RestfulservicecreateOrderDataParts Class Doc Comment
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RestfulservicecreateOrderDataParts implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'restfulservicecreateOrder_data_parts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'base_pn' => 'string',
'mfg_code' => 'string',
'part_number' => 'string',
'order_quantity' => 'string',
'authorization_or_reference_number' => 'string',
'claims_processor_code' => 'string',
'claim_number' => 'string',
'allow_auto_sub' => 'string',
'custom_part_fields' => '\Encompass\SDK\Model\RestfulservicecreateOrderDataCustomPartFields[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'base_pn' => null,
'mfg_code' => null,
'part_number' => null,
'order_quantity' => null,
'authorization_or_reference_number' => null,
'claims_processor_code' => null,
'claim_number' => null,
'allow_auto_sub' => null,
'custom_part_fields' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_pn' => 'basePN',
'mfg_code' => 'mfgCode',
'part_number' => 'partNumber',
'order_quantity' => 'orderQuantity',
'authorization_or_reference_number' => 'authorizationOrReferenceNumber',
'claims_processor_code' => 'claimsProcessorCode',
'claim_number' => 'claimNumber',
'allow_auto_sub' => 'allowAutoSub',
'custom_part_fields' => 'customPartFields'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_pn' => 'setBasePn',
'mfg_code' => 'setMfgCode',
'part_number' => 'setPartNumber',
'order_quantity' => 'setOrderQuantity',
'authorization_or_reference_number' => 'setAuthorizationOrReferenceNumber',
'claims_processor_code' => 'setClaimsProcessorCode',
'claim_number' => 'setClaimNumber',
'allow_auto_sub' => 'setAllowAutoSub',
'custom_part_fields' => 'setCustomPartFields'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_pn' => 'getBasePn',
'mfg_code' => 'getMfgCode',
'part_number' => 'getPartNumber',
'order_quantity' => 'getOrderQuantity',
'authorization_or_reference_number' => 'getAuthorizationOrReferenceNumber',
'claims_processor_code' => 'getClaimsProcessorCode',
'claim_number' => 'getClaimNumber',
'allow_auto_sub' => 'getAllowAutoSub',
'custom_part_fields' => 'getCustomPartFields'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['base_pn'] = isset($data['base_pn']) ? $data['base_pn'] : null;
        $this->container['mfg_code'] = isset($data['mfg_code']) ? $data['mfg_code'] : null;
        $this->container['part_number'] = isset($data['part_number']) ? $data['part_number'] : null;
        $this->container['order_quantity'] = isset($data['order_quantity']) ? $data['order_quantity'] : null;
        $this->container['authorization_or_reference_number'] = isset($data['authorization_or_reference_number']) ? $data['authorization_or_reference_number'] : null;
        $this->container['claims_processor_code'] = isset($data['claims_processor_code']) ? $data['claims_processor_code'] : null;
        $this->container['claim_number'] = isset($data['claim_number']) ? $data['claim_number'] : null;
        $this->container['allow_auto_sub'] = isset($data['allow_auto_sub']) ? $data['allow_auto_sub'] : null;
        $this->container['custom_part_fields'] = isset($data['custom_part_fields']) ? $data['custom_part_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_quantity'] === null) {
            $invalidProperties[] = "'order_quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_pn
     *
     * @return string
     */
    public function getBasePn()
    {
        return $this->container['base_pn'];
    }

    /**
     * Sets base_pn
     *
     * @param string $base_pn internal Encompass part id# `basePN` returned from `search` or `partsInformation` service
     *
     * @return $this
     */
    public function setBasePn($base_pn)
    {
        $this->container['base_pn'] = $base_pn;

        return $this;
    }

    /**
     * Gets mfg_code
     *
     * @return string
     */
    public function getMfgCode()
    {
        return $this->container['mfg_code'];
    }

    /**
     * Sets mfg_code
     *
     * @param string $mfg_code 3 character manufacturer code - a list can be obtained from the `brandList` service.
     *
     * @return $this
     */
    public function setMfgCode($mfg_code)
    {
        $this->container['mfg_code'] = $mfg_code;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return string
     */
    public function getPartNumber()
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param string $part_number part_number
     *
     * @return $this
     */
    public function setPartNumber($part_number)
    {
        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets order_quantity
     *
     * @return string
     */
    public function getOrderQuantity()
    {
        return $this->container['order_quantity'];
    }

    /**
     * Sets order_quantity
     *
     * @param string $order_quantity quantity of part to order
     *
     * @return $this
     */
    public function setOrderQuantity($order_quantity)
    {
        $this->container['order_quantity'] = $order_quantity;

        return $this;
    }

    /**
     * Gets authorization_or_reference_number
     *
     * @return string
     */
    public function getAuthorizationOrReferenceNumber()
    {
        return $this->container['authorization_or_reference_number'];
    }

    /**
     * Sets authorization_or_reference_number
     *
     * @param string $authorization_or_reference_number part reference number or manufacturer authorization
     *
     * @return $this
     */
    public function setAuthorizationOrReferenceNumber($authorization_or_reference_number)
    {
        $this->container['authorization_or_reference_number'] = $authorization_or_reference_number;

        return $this;
    }

    /**
     * Gets claims_processor_code
     *
     * @return string
     */
    public function getClaimsProcessorCode()
    {
        return $this->container['claims_processor_code'];
    }

    /**
     * Sets claims_processor_code
     *
     * @param string $claims_processor_code Send this only if you want Encompass to send information to a claim processor |Value|Description| |-------|--------| |9|AIG| |4|Assurant| |5|Cinch| |11|GE| |7|LG| |10|NSA| |6|Samsung| |2|ServiceBench| |8|Whirlpool|
     *
     * @return $this
     */
    public function setClaimsProcessorCode($claims_processor_code)
    {
        $this->container['claims_processor_code'] = $claims_processor_code;

        return $this;
    }

    /**
     * Gets claim_number
     *
     * @return string
     */
    public function getClaimNumber()
    {
        return $this->container['claim_number'];
    }

    /**
     * Sets claim_number
     *
     * @param string $claim_number Send this only if you want Encompass to send information to a claim   processor
     *
     * @return $this
     */
    public function setClaimNumber($claim_number)
    {
        $this->container['claim_number'] = $claim_number;

        return $this;
    }

    /**
     * Gets allow_auto_sub
     *
     * @return string
     */
    public function getAllowAutoSub()
    {
        return $this->container['allow_auto_sub'];
    }

    /**
     * Sets allow_auto_sub
     *
     * @param string $allow_auto_sub Can we auto substitute the part if you send the order with an old part number(Y/N)? This defaults to no, so that you always order the correct part and you know the price up-front.
     *
     * @return $this
     */
    public function setAllowAutoSub($allow_auto_sub)
    {
        $this->container['allow_auto_sub'] = $allow_auto_sub;

        return $this;
    }

    /**
     * Gets custom_part_fields
     *
     * @return \Encompass\SDK\Model\RestfulservicecreateOrderDataCustomPartFields[]
     */
    public function getCustomPartFields()
    {
        return $this->container['custom_part_fields'];
    }

    /**
     * Sets custom_part_fields
     *
     * @param \Encompass\SDK\Model\RestfulservicecreateOrderDataCustomPartFields[] $custom_part_fields array of values that will be stored at the part level and can be sent back to the customers system.  These values must always be sent in the same order.  We suggest making 1 of the occurrences a line number.  This will allow you to tie our line detail back to your original line number, since we might ship order from multiple warehouses or partial ship backorders.
     *
     * @return $this
     */
    public function setCustomPartFields($custom_part_fields)
    {
        $this->container['custom_part_fields'] = $custom_part_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
