<?php
/**
 * RestfulservicecreateOrderData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Encompass Supply Chain Solutions
 *
 * Services require a user name and password that must be obtained from Encompass.  We issue a single set of credentials for all invironments.  Please make sure you are pointing to the correct endpoint described in the __servers__ section.  Services all return the elements `status->errorCode` and `status->errorMessage`.  Successful reqeusts will return a __100__ `errorCode`.   If you have any questions that are not answered here or would like to discuss the overall process, please contact your account rep to schedule a technical call.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Encompass\SDK\Model;

use \ArrayAccess;
use \Encompass\SDK\ObjectSerializer;

/**
 * RestfulservicecreateOrderData Class Doc Comment
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RestfulservicecreateOrderData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'restfulservicecreateOrder_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_type' => 'string',
        'use_customer_cross' => 'string',
        'reference_number1' => 'string',
        'transaction_id' => 'string',
        'reference_number2' => 'string',
        'shipping_method' => 'string',
        'shipping_third_party_number' => 'string',
        'shipping_third_party_carrier' => 'string',
        'blind_ship' => 'string',
        'residential_address' => 'string',
        'require_signature' => 'string',
        'ship_complete' => 'string',
        'ship_to_address' => '\Encompass\SDK\Model\RestfulservicecreateOrderDataShipToAddress',
        'request_return_service' => 'string',
        'email_address' => 'string',
        'request_location_number' => 'string',
        'asf_override' => 'string',
        'claim_date' => 'string',
        'parts' => '\Encompass\SDK\Model\RestfulservicecreateOrderDataParts[]',
        'custom_order_fields' => '\Encompass\SDK\Model\RestfulservicecreateOrderDataCustomPartFields[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_type' => null,
        'use_customer_cross' => null,
        'reference_number1' => null,
        'transaction_id' => null,
        'reference_number2' => null,
        'shipping_method' => null,
        'shipping_third_party_number' => null,
        'shipping_third_party_carrier' => null,
        'blind_ship' => null,
        'residential_address' => null,
        'require_signature' => null,
        'ship_complete' => null,
        'ship_to_address' => null,
        'request_return_service' => null,
        'email_address' => null,
        'request_location_number' => null,
        'asf_override' => null,
        'claim_date' => null,
        'parts' => null,
        'custom_order_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_type' => 'customerType',
        'use_customer_cross' => 'useCustomerCross',
        'reference_number1' => 'referenceNumber1',
        'transaction_id' => 'transactionID',
        'reference_number2' => 'referenceNumber2',
        'shipping_method' => 'shippingMethod',
        'shipping_third_party_number' => 'shippingThirdPartyNumber',
        'shipping_third_party_carrier' => 'shippingThirdPartyCarrier',
        'blind_ship' => 'blindShip',
        'residential_address' => 'residentialAddress',
        'require_signature' => 'requireSignature',
        'ship_complete' => 'shipComplete',
        'ship_to_address' => 'shipToAddress',
        'request_return_service' => 'requestReturnService',
        'email_address' => 'emailAddress',
        'request_location_number' => 'requestLocationNumber',
        'asf_override' => 'asfOverride',
        'claim_date' => 'claimDate',
        'parts' => 'parts',
        'custom_order_fields' => 'customOrderFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_type' => 'setCustomerType',
        'use_customer_cross' => 'setUseCustomerCross',
        'reference_number1' => 'setReferenceNumber1',
        'transaction_id' => 'setTransactionId',
        'reference_number2' => 'setReferenceNumber2',
        'shipping_method' => 'setShippingMethod',
        'shipping_third_party_number' => 'setShippingThirdPartyNumber',
        'shipping_third_party_carrier' => 'setShippingThirdPartyCarrier',
        'blind_ship' => 'setBlindShip',
        'residential_address' => 'setResidentialAddress',
        'require_signature' => 'setRequireSignature',
        'ship_complete' => 'setShipComplete',
        'ship_to_address' => 'setShipToAddress',
        'request_return_service' => 'setRequestReturnService',
        'email_address' => 'setEmailAddress',
        'request_location_number' => 'setRequestLocationNumber',
        'asf_override' => 'setAsfOverride',
        'claim_date' => 'setClaimDate',
        'parts' => 'setParts',
        'custom_order_fields' => 'setCustomOrderFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_type' => 'getCustomerType',
        'use_customer_cross' => 'getUseCustomerCross',
        'reference_number1' => 'getReferenceNumber1',
        'transaction_id' => 'getTransactionId',
        'reference_number2' => 'getReferenceNumber2',
        'shipping_method' => 'getShippingMethod',
        'shipping_third_party_number' => 'getShippingThirdPartyNumber',
        'shipping_third_party_carrier' => 'getShippingThirdPartyCarrier',
        'blind_ship' => 'getBlindShip',
        'residential_address' => 'getResidentialAddress',
        'require_signature' => 'getRequireSignature',
        'ship_complete' => 'getShipComplete',
        'ship_to_address' => 'getShipToAddress',
        'request_return_service' => 'getRequestReturnService',
        'email_address' => 'getEmailAddress',
        'request_location_number' => 'getRequestLocationNumber',
        'asf_override' => 'getAsfOverride',
        'claim_date' => 'getClaimDate',
        'parts' => 'getParts',
        'custom_order_fields' => 'getCustomOrderFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_type'] = isset($data['customer_type']) ? $data['customer_type'] : null;
        $this->container['use_customer_cross'] = isset($data['use_customer_cross']) ? $data['use_customer_cross'] : null;
        $this->container['reference_number1'] = isset($data['reference_number1']) ? $data['reference_number1'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['reference_number2'] = isset($data['reference_number2']) ? $data['reference_number2'] : null;
        $this->container['shipping_method'] = isset($data['shipping_method']) ? $data['shipping_method'] : null;
        $this->container['shipping_third_party_number'] = isset($data['shipping_third_party_number']) ? $data['shipping_third_party_number'] : null;
        $this->container['shipping_third_party_carrier'] = isset($data['shipping_third_party_carrier']) ? $data['shipping_third_party_carrier'] : null;
        $this->container['blind_ship'] = isset($data['blind_ship']) ? $data['blind_ship'] : null;
        $this->container['residential_address'] = isset($data['residential_address']) ? $data['residential_address'] : null;
        $this->container['require_signature'] = isset($data['require_signature']) ? $data['require_signature'] : null;
        $this->container['ship_complete'] = isset($data['ship_complete']) ? $data['ship_complete'] : null;
        $this->container['ship_to_address'] = isset($data['ship_to_address']) ? $data['ship_to_address'] : null;
        $this->container['request_return_service'] = isset($data['request_return_service']) ? $data['request_return_service'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['request_location_number'] = isset($data['request_location_number']) ? $data['request_location_number'] : null;
        $this->container['asf_override'] = isset($data['asf_override']) ? $data['asf_override'] : null;
        $this->container['claim_date'] = isset($data['claim_date']) ? $data['claim_date'] : null;
        $this->container['parts'] = isset($data['parts']) ? $data['parts'] : null;
        $this->container['custom_order_fields'] = isset($data['custom_order_fields']) ? $data['custom_order_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['reference_number1'] === null) {
            $invalidProperties[] = "'reference_number1' can't be null";
        }
        if ($this->container['ship_to_address'] === null) {
            $invalidProperties[] = "'ship_to_address' can't be null";
        }
        if ($this->container['parts'] === null) {
            $invalidProperties[] = "'parts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_type
     *
     * @return string
     */
    public function getCustomerType()
    {
        return $this->container['customer_type'];
    }

    /**
     * Sets customer_type
     *
     * @param string $customer_type customer type (not used for all accounts)
     *
     * @return $this
     */
    public function setCustomerType($customer_type)
    {
        $this->container['customer_type'] = $customer_type;

        return $this;
    }

    /**
     * Gets use_customer_cross
     *
     * @return string
     */
    public function getUseCustomerCross()
    {
        return $this->container['use_customer_cross'];
    }

    /**
     * Sets use_customer_cross
     *
     * @param string $use_customer_cross map your customer number to ours (not available for all accounts) (y/n)
     *
     * @return $this
     */
    public function setUseCustomerCross($use_customer_cross)
    {
        $this->container['use_customer_cross'] = $use_customer_cross;

        return $this;
    }

    /**
     * Gets reference_number1
     *
     * @return string
     */
    public function getReferenceNumber1()
    {
        return $this->container['reference_number1'];
    }

    /**
     * Sets reference_number1
     *
     * @param string $reference_number1 main reference number
     *
     * @return $this
     */
    public function setReferenceNumber1($reference_number1)
    {
        $this->container['reference_number1'] = $reference_number1;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id required if you allow duplicate referenceNumber1 to prevent duplicate transactions
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets reference_number2
     *
     * @return string
     */
    public function getReferenceNumber2()
    {
        return $this->container['reference_number2'];
    }

    /**
     * Sets reference_number2
     *
     * @param string $reference_number2 alternate reference number or claim number
     *
     * @return $this
     */
    public function setReferenceNumber2($reference_number2)
    {
        $this->container['reference_number2'] = $reference_number2;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string $shipping_method Method the order will ship |Value|Description| |-------|--------| |null|Customer Default| |1|Ground| |2|2 Day - Allow downgrade to ground if destination is within 2 day ground service area to save money| |6|2 Day - No downgrade to ground service| |3|Next Day - No downgrade to ground service| |7|Next Day - Allow downgrade to ground if destination is within 1 day ground service area to save money| |5|3 Day| |4|Pick-up - must send a requestLocationNumber or the order will default to the accounts home location|
     *
     * @return $this
     */
    public function setShippingMethod($shipping_method)
    {
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets shipping_third_party_number
     *
     * @return string
     */
    public function getShippingThirdPartyNumber()
    {
        return $this->container['shipping_third_party_number'];
    }

    /**
     * Sets shipping_third_party_number
     *
     * @param string $shipping_third_party_number third party shipping account number
     *
     * @return $this
     */
    public function setShippingThirdPartyNumber($shipping_third_party_number)
    {
        $this->container['shipping_third_party_number'] = $shipping_third_party_number;

        return $this;
    }

    /**
     * Gets shipping_third_party_carrier
     *
     * @return string
     */
    public function getShippingThirdPartyCarrier()
    {
        return $this->container['shipping_third_party_carrier'];
    }

    /**
     * Sets shipping_third_party_carrier
     *
     * @param string $shipping_third_party_carrier third party shipping carrier _required if you send a shippingThirdPartyNumber_ |Value|Description| |-------|--------| |1|FedEx| |2|UPS|
     *
     * @return $this
     */
    public function setShippingThirdPartyCarrier($shipping_third_party_carrier)
    {
        $this->container['shipping_third_party_carrier'] = $shipping_third_party_carrier;

        return $this;
    }

    /**
     * Gets blind_ship
     *
     * @return string
     */
    public function getBlindShip()
    {
        return $this->container['blind_ship'];
    }

    /**
     * Sets blind_ship
     *
     * @param string $blind_ship request a blind shippment (y/n).  There not be pricing on any communications and it will appear to ship from your company.
     *
     * @return $this
     */
    public function setBlindShip($blind_ship)
    {
        $this->container['blind_ship'] = $blind_ship;

        return $this;
    }

    /**
     * Gets residential_address
     *
     * @return string
     */
    public function getResidentialAddress()
    {
        return $this->container['residential_address'];
    }

    /**
     * Sets residential_address
     *
     * @param string $residential_address residential address (y/n)
     *
     * @return $this
     */
    public function setResidentialAddress($residential_address)
    {
        $this->container['residential_address'] = $residential_address;

        return $this;
    }

    /**
     * Gets require_signature
     *
     * @return string
     */
    public function getRequireSignature()
    {
        return $this->container['require_signature'];
    }

    /**
     * Sets require_signature
     *
     * @param string $require_signature require signature for delivery (y/n) - additional freight charges will apply
     *
     * @return $this
     */
    public function setRequireSignature($require_signature)
    {
        $this->container['require_signature'] = $require_signature;

        return $this;
    }

    /**
     * Gets ship_complete
     *
     * @return string
     */
    public function getShipComplete()
    {
        return $this->container['ship_complete'];
    }

    /**
     * Sets ship_complete
     *
     * @param string $ship_complete ship order complete(y/n)
     *
     * @return $this
     */
    public function setShipComplete($ship_complete)
    {
        $this->container['ship_complete'] = $ship_complete;

        return $this;
    }

    /**
     * Gets ship_to_address
     *
     * @return \Encompass\SDK\Model\RestfulservicecreateOrderDataShipToAddress
     */
    public function getShipToAddress()
    {
        return $this->container['ship_to_address'];
    }

    /**
     * Sets ship_to_address
     *
     * @param \Encompass\SDK\Model\RestfulservicecreateOrderDataShipToAddress $ship_to_address ship_to_address
     *
     * @return $this
     */
    public function setShipToAddress($ship_to_address)
    {
        $this->container['ship_to_address'] = $ship_to_address;

        return $this;
    }

    /**
     * Gets request_return_service
     *
     * @return string
     */
    public function getRequestReturnService()
    {
        return $this->container['request_return_service'];
    }

    /**
     * Sets request_return_service
     *
     * @param string $request_return_service add return service label (y/n) (fees might apply)
     *
     * @return $this
     */
    public function setRequestReturnService($request_return_service)
    {
        $this->container['request_return_service'] = $request_return_service;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address address for confirmation email
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets request_location_number
     *
     * @return string
     */
    public function getRequestLocationNumber()
    {
        return $this->container['request_location_number'];
    }

    /**
     * Sets request_location_number
     *
     * @param string $request_location_number This should only be used to request a specific warehouse location in certain situations such as a pick-up. We normally route order based on availability and distance for the fastest results.  Using this incorrectly could cause order delays and additional freight charges.  If an invalid value is received, it will just be ignored.
     *
     * @return $this
     */
    public function setRequestLocationNumber($request_location_number)
    {
        $this->container['request_location_number'] = $request_location_number;

        return $this;
    }

    /**
     * Gets asf_override
     *
     * @return string
     */
    public function getAsfOverride()
    {
        return $this->container['asf_override'];
    }

    /**
     * Sets asf_override
     *
     * @param string $asf_override Your authorized servicer number should already be on your Encopmpass account.  This can be used to override that number in special cases where you have multiple authorized servicer numbers for multiple locations.
     *
     * @return $this
     */
    public function setAsfOverride($asf_override)
    {
        $this->container['asf_override'] = $asf_override;

        return $this;
    }

    /**
     * Gets claim_date
     *
     * @return string
     */
    public function getClaimDate()
    {
        return $this->container['claim_date'];
    }

    /**
     * Sets claim_date
     *
     * @param string $claim_date date your customers claim was made to you in the format yyyy-mm-dd
     *
     * @return $this
     */
    public function setClaimDate($claim_date)
    {
        $this->container['claim_date'] = $claim_date;

        return $this;
    }

    /**
     * Gets parts
     *
     * @return \Encompass\SDK\Model\RestfulservicecreateOrderDataParts[]
     */
    public function getParts()
    {
        return $this->container['parts'];
    }

    /**
     * Sets parts
     *
     * @param \Encompass\SDK\Model\RestfulservicecreateOrderDataParts[] $parts array of parts to be ordered - Preferred method Send the `basePN` that is returned from our `search` or `partsInformation` service. You can also send the `mfgCode` and `partNumber` as a backup, but it is not required for this method. - Alternative method Do not send the `basePN`, just send the `mfgCode` and `partNumber`.  This prevents issues where multiple manufacruers have the same part number.
     *
     * @return $this
     */
    public function setParts($parts)
    {
        $this->container['parts'] = $parts;

        return $this;
    }

    /**
     * Gets custom_order_fields
     *
     * @return \Encompass\SDK\Model\RestfulservicecreateOrderDataCustomPartFields[]
     */
    public function getCustomOrderFields()
    {
        return $this->container['custom_order_fields'];
    }

    /**
     * Sets custom_order_fields
     *
     * @param \Encompass\SDK\Model\RestfulservicecreateOrderDataCustomPartFields[] $custom_order_fields array of values that will be stored at the order level and can be sent back to the customers system.  These values must always be sent in the same order
     *
     * @return $this
     */
    public function setCustomOrderFields($custom_order_fields)
    {
        $this->container['custom_order_fields'] = $custom_order_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
