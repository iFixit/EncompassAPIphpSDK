<?php
/**
 * InlineResponse2002Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Encompass Supply Chain Solutions
 *
 * Services require a user name and password that must be obtained from Encompass.  We issue a single set of credentials for all invironments.  Please make sure you are pointing to the correct endpoint described in the __servers__ section.  Services all return the elements `status->errorCode` and `status->errorMessage`.  Successful reqeusts will return a __100__ `errorCode`.   If you have any questions that are not answered here or would like to discuss the overall process, please contact your account rep to schedule a technical call.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Encompass\SDK\Model;

use \ArrayAccess;
use \Encompass\SDK\ObjectSerializer;

/**
 * InlineResponse2002Data Class Doc Comment
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_2_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'service_manual_url' => 'string',
'exploded_view_url' => 'string',
'exploded_view_id' => 'string',
'small_image_url' => 'string',
'parts' => '\Encompass\SDK\Model\InlineResponse2002DataParts[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'service_manual_url' => null,
'exploded_view_url' => null,
'exploded_view_id' => null,
'small_image_url' => null,
'parts' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'service_manual_url' => 'serviceManualUrl',
'exploded_view_url' => 'explodedViewUrl',
'exploded_view_id' => 'explodedViewID',
'small_image_url' => 'smallImageURL',
'parts' => 'parts'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'service_manual_url' => 'setServiceManualUrl',
'exploded_view_url' => 'setExplodedViewUrl',
'exploded_view_id' => 'setExplodedViewId',
'small_image_url' => 'setSmallImageUrl',
'parts' => 'setParts'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'service_manual_url' => 'getServiceManualUrl',
'exploded_view_url' => 'getExplodedViewUrl',
'exploded_view_id' => 'getExplodedViewId',
'small_image_url' => 'getSmallImageUrl',
'parts' => 'getParts'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['service_manual_url'] = isset($data['service_manual_url']) ? $data['service_manual_url'] : null;
        $this->container['exploded_view_url'] = isset($data['exploded_view_url']) ? $data['exploded_view_url'] : null;
        $this->container['exploded_view_id'] = isset($data['exploded_view_id']) ? $data['exploded_view_id'] : null;
        $this->container['small_image_url'] = isset($data['small_image_url']) ? $data['small_image_url'] : null;
        $this->container['parts'] = isset($data['parts']) ? $data['parts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets service_manual_url
     *
     * @return string
     */
    public function getServiceManualUrl()
    {
        return $this->container['service_manual_url'];
    }

    /**
     * Sets service_manual_url
     *
     * @param string $service_manual_url URL of service manual
     *
     * @return $this
     */
    public function setServiceManualUrl($service_manual_url)
    {
        $this->container['service_manual_url'] = $service_manual_url;

        return $this;
    }

    /**
     * Gets exploded_view_url
     *
     * @return string
     */
    public function getExplodedViewUrl()
    {
        return $this->container['exploded_view_url'];
    }

    /**
     * Sets exploded_view_url
     *
     * @param string $exploded_view_url URL on our webSite for interactive exploded views.  This can be used if you do not want to build your own UI.
     *
     * @return $this
     */
    public function setExplodedViewUrl($exploded_view_url)
    {
        $this->container['exploded_view_url'] = $exploded_view_url;

        return $this;
    }

    /**
     * Gets exploded_view_id
     *
     * @return string
     */
    public function getExplodedViewId()
    {
        return $this->container['exploded_view_id'];
    }

    /**
     * Sets exploded_view_id
     *
     * @param string $exploded_view_id id that can be passed to the `explodedView/listAssemblies` service for interactive exploded views in your own UI
     *
     * @return $this
     */
    public function setExplodedViewId($exploded_view_id)
    {
        $this->container['exploded_view_id'] = $exploded_view_id;

        return $this;
    }

    /**
     * Gets small_image_url
     *
     * @return string
     */
    public function getSmallImageUrl()
    {
        return $this->container['small_image_url'];
    }

    /**
     * Sets small_image_url
     *
     * @param string $small_image_url image URL
     *
     * @return $this
     */
    public function setSmallImageUrl($small_image_url)
    {
        $this->container['small_image_url'] = $small_image_url;

        return $this;
    }

    /**
     * Gets parts
     *
     * @return \Encompass\SDK\Model\InlineResponse2002DataParts[]
     */
    public function getParts()
    {
        return $this->container['parts'];
    }

    /**
     * Sets parts
     *
     * @param \Encompass\SDK\Model\InlineResponse2002DataParts[] $parts array of part details
     *
     * @return $this
     */
    public function setParts($parts)
    {
        $this->container['parts'] = $parts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
