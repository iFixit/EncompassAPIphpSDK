<?php
/**
 * RestfulserviceCreateOrderPostRequestDataPartsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Encompass Supply Chain Solutions
 *
 * Services require a user name and password that must be obtained from Encompass.  We issue a single set of credentials for all invironments.  Please make sure you are pointing to the correct endpoint described in the __servers__ section.  Services all return the elements `status->errorCode` and `status->errorMessage`.  Successful reqeusts will return a __100__ `errorCode`.   If you have any questions that are not answered here or would like to discuss the overall process, please contact your account rep to schedule a technical call.
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Encompass\SDK\Model;

use \ArrayAccess;
use \Encompass\SDK\ObjectSerializer;

/**
 * RestfulserviceCreateOrderPostRequestDataPartsInner Class Doc Comment
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RestfulserviceCreateOrderPostRequestDataPartsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_restfulservice_createOrder_post_request_data_parts_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'base_pn' => 'string',
        'mfg_code' => 'string',
        'part_number' => 'string',
        'order_quantity' => 'string',
        'authorization_or_reference_number' => 'string',
        'claims_processor_code' => 'string',
        'claim_number' => 'string',
        'allow_auto_sub' => 'string',
        'symptom_id' => 'string',
        'custom_part_fields' => '\Encompass\SDK\Model\RestfulserviceCreateOrderPostRequestDataPartsInnerCustomPartFieldsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'base_pn' => null,
        'mfg_code' => null,
        'part_number' => null,
        'order_quantity' => null,
        'authorization_or_reference_number' => null,
        'claims_processor_code' => null,
        'claim_number' => null,
        'allow_auto_sub' => null,
        'symptom_id' => null,
        'custom_part_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'base_pn' => false,
        'mfg_code' => false,
        'part_number' => false,
        'order_quantity' => false,
        'authorization_or_reference_number' => false,
        'claims_processor_code' => false,
        'claim_number' => false,
        'allow_auto_sub' => false,
        'symptom_id' => false,
        'custom_part_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_pn' => 'basePN',
        'mfg_code' => 'mfgCode',
        'part_number' => 'partNumber',
        'order_quantity' => 'orderQuantity',
        'authorization_or_reference_number' => 'authorizationOrReferenceNumber',
        'claims_processor_code' => 'claimsProcessorCode',
        'claim_number' => 'claimNumber',
        'allow_auto_sub' => 'allowAutoSub',
        'symptom_id' => 'symptomID',
        'custom_part_fields' => 'customPartFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_pn' => 'setBasePn',
        'mfg_code' => 'setMfgCode',
        'part_number' => 'setPartNumber',
        'order_quantity' => 'setOrderQuantity',
        'authorization_or_reference_number' => 'setAuthorizationOrReferenceNumber',
        'claims_processor_code' => 'setClaimsProcessorCode',
        'claim_number' => 'setClaimNumber',
        'allow_auto_sub' => 'setAllowAutoSub',
        'symptom_id' => 'setSymptomId',
        'custom_part_fields' => 'setCustomPartFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_pn' => 'getBasePn',
        'mfg_code' => 'getMfgCode',
        'part_number' => 'getPartNumber',
        'order_quantity' => 'getOrderQuantity',
        'authorization_or_reference_number' => 'getAuthorizationOrReferenceNumber',
        'claims_processor_code' => 'getClaimsProcessorCode',
        'claim_number' => 'getClaimNumber',
        'allow_auto_sub' => 'getAllowAutoSub',
        'symptom_id' => 'getSymptomId',
        'custom_part_fields' => 'getCustomPartFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('base_pn', $data ?? [], null);
        $this->setIfExists('mfg_code', $data ?? [], null);
        $this->setIfExists('part_number', $data ?? [], null);
        $this->setIfExists('order_quantity', $data ?? [], null);
        $this->setIfExists('authorization_or_reference_number', $data ?? [], null);
        $this->setIfExists('claims_processor_code', $data ?? [], null);
        $this->setIfExists('claim_number', $data ?? [], null);
        $this->setIfExists('allow_auto_sub', $data ?? [], null);
        $this->setIfExists('symptom_id', $data ?? [], null);
        $this->setIfExists('custom_part_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_quantity'] === null) {
            $invalidProperties[] = "'order_quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_pn
     *
     * @return string|null
     */
    public function getBasePn()
    {
        return $this->container['base_pn'];
    }

    /**
     * Sets base_pn
     *
     * @param string|null $base_pn internal Encompass part id# `basePN` returned from `search` or `partsInformation` service
     *
     * @return self
     */
    public function setBasePn($base_pn)
    {
        if (is_null($base_pn)) {
            throw new \InvalidArgumentException('non-nullable base_pn cannot be null');
        }
        $this->container['base_pn'] = $base_pn;

        return $this;
    }

    /**
     * Gets mfg_code
     *
     * @return string|null
     */
    public function getMfgCode()
    {
        return $this->container['mfg_code'];
    }

    /**
     * Sets mfg_code
     *
     * @param string|null $mfg_code 3 character manufacturer code - a list can be obtained from the `brandList` service.
     *
     * @return self
     */
    public function setMfgCode($mfg_code)
    {
        if (is_null($mfg_code)) {
            throw new \InvalidArgumentException('non-nullable mfg_code cannot be null');
        }
        $this->container['mfg_code'] = $mfg_code;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return string|null
     */
    public function getPartNumber()
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param string|null $part_number 
     *
     * @return self
     */
    public function setPartNumber($part_number)
    {
        if (is_null($part_number)) {
            throw new \InvalidArgumentException('non-nullable part_number cannot be null');
        }
        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets order_quantity
     *
     * @return string
     */
    public function getOrderQuantity()
    {
        return $this->container['order_quantity'];
    }

    /**
     * Sets order_quantity
     *
     * @param string $order_quantity quantity of part to order
     *
     * @return self
     */
    public function setOrderQuantity($order_quantity)
    {
        if (is_null($order_quantity)) {
            throw new \InvalidArgumentException('non-nullable order_quantity cannot be null');
        }
        $this->container['order_quantity'] = $order_quantity;

        return $this;
    }

    /**
     * Gets authorization_or_reference_number
     *
     * @return string|null
     */
    public function getAuthorizationOrReferenceNumber()
    {
        return $this->container['authorization_or_reference_number'];
    }

    /**
     * Sets authorization_or_reference_number
     *
     * @param string|null $authorization_or_reference_number part reference number or manufacturer authorization
     *
     * @return self
     */
    public function setAuthorizationOrReferenceNumber($authorization_or_reference_number)
    {
        if (is_null($authorization_or_reference_number)) {
            throw new \InvalidArgumentException('non-nullable authorization_or_reference_number cannot be null');
        }
        $this->container['authorization_or_reference_number'] = $authorization_or_reference_number;

        return $this;
    }

    /**
     * Gets claims_processor_code
     *
     * @return string|null
     */
    public function getClaimsProcessorCode()
    {
        return $this->container['claims_processor_code'];
    }

    /**
     * Sets claims_processor_code
     *
     * @param string|null $claims_processor_code Send this only if you want Encompass to send information to a claim processor |Value|Description| |-------|--------| |9|AIG| |4|Assurant| |5|Cinch| |11|GE| |7|LG| |10|NSA| |6|Samsung| |2|ServiceBench| |8|Whirlpool|
     *
     * @return self
     */
    public function setClaimsProcessorCode($claims_processor_code)
    {
        if (is_null($claims_processor_code)) {
            throw new \InvalidArgumentException('non-nullable claims_processor_code cannot be null');
        }
        $this->container['claims_processor_code'] = $claims_processor_code;

        return $this;
    }

    /**
     * Gets claim_number
     *
     * @return string|null
     */
    public function getClaimNumber()
    {
        return $this->container['claim_number'];
    }

    /**
     * Sets claim_number
     *
     * @param string|null $claim_number Send this only if you want Encompass to send information to a claim   processor
     *
     * @return self
     */
    public function setClaimNumber($claim_number)
    {
        if (is_null($claim_number)) {
            throw new \InvalidArgumentException('non-nullable claim_number cannot be null');
        }
        $this->container['claim_number'] = $claim_number;

        return $this;
    }

    /**
     * Gets allow_auto_sub
     *
     * @return string|null
     */
    public function getAllowAutoSub()
    {
        return $this->container['allow_auto_sub'];
    }

    /**
     * Sets allow_auto_sub
     *
     * @param string|null $allow_auto_sub Can we auto substitute the part if you send the order with an old part number(Y/N)? This defaults to no, so that you always order the correct part and you know the price up-front.
     *
     * @return self
     */
    public function setAllowAutoSub($allow_auto_sub)
    {
        if (is_null($allow_auto_sub)) {
            throw new \InvalidArgumentException('non-nullable allow_auto_sub cannot be null');
        }
        $this->container['allow_auto_sub'] = $allow_auto_sub;

        return $this;
    }

    /**
     * Gets symptom_id
     *
     * @return string|null
     */
    public function getSymptomId()
    {
        return $this->container['symptom_id'];
    }

    /**
     * Sets symptom_id
     *
     * @param string|null $symptom_id Provide the symptom you are fixing and help us provide you with better part prediction data.  This value comes from the `partInformation` or `modelPartLIst` service
     *
     * @return self
     */
    public function setSymptomId($symptom_id)
    {
        if (is_null($symptom_id)) {
            throw new \InvalidArgumentException('non-nullable symptom_id cannot be null');
        }
        $this->container['symptom_id'] = $symptom_id;

        return $this;
    }

    /**
     * Gets custom_part_fields
     *
     * @return \Encompass\SDK\Model\RestfulserviceCreateOrderPostRequestDataPartsInnerCustomPartFieldsInner[]|null
     */
    public function getCustomPartFields()
    {
        return $this->container['custom_part_fields'];
    }

    /**
     * Sets custom_part_fields
     *
     * @param \Encompass\SDK\Model\RestfulserviceCreateOrderPostRequestDataPartsInnerCustomPartFieldsInner[]|null $custom_part_fields array of values that will be stored at the part level and can be sent back to the customers system.  These values must always be sent in the same order.  We suggest making 1 of the occurrences a line number.  This will allow you to tie our line detail back to your original line number, since we might ship order from multiple warehouses or partial ship backorders.
     *
     * @return self
     */
    public function setCustomPartFields($custom_part_fields)
    {
        if (is_null($custom_part_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_part_fields cannot be null');
        }
        $this->container['custom_part_fields'] = $custom_part_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


