<?php
/**
 * InlineResponse2005DataParts
 *
 * PHP version 5
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Encompass Supply Chain Solutions
 *
 * Services require a user name and password that must be obtained from Encompass.  We issue a single set of credentials for all invironments.  Please make sure you are pointing to the correct endpoint described in the __servers__ section.  Services all return the elements `status->errorCode` and `status->errorMessage`.  Successful reqeusts will return a __100__ `errorCode`.   If you have any questions that are not answered here or would like to discuss the overall process, please contact your account rep to schedule a technical call.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Encompass\SDK\Model;

use \ArrayAccess;
use \Encompass\SDK\ObjectSerializer;

/**
 * InlineResponse2005DataParts Class Doc Comment
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2005DataParts implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_5_data_parts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'base_pn' => 'string',
'mfg_code' => 'string',
'mfg_name' => 'string',
'part_number' => 'string',
'part_description' => 'string',
'detailed_part_description' => 'string',
'weight' => 'string',
'length' => 'string',
'width' => 'string',
'height' => 'string',
'hts_code' => 'string',
'carrier_size' => 'float',
'authorization_required' => 'string',
'availability' => 'string',
'availability_by_location' => '\Encompass\SDK\Model\InlineResponse2005DataAvailabilityByLocation[]',
'eta' => 'string',
'list_price' => 'string',
'core_price' => 'string',
'part_price' => 'string',
'total_price' => 'string',
'sub_part' => 'string',
'allow_rts' => 'string',
'allow_iwr' => 'string',
'small_image_url' => 'string',
'compatible_models' => '\Encompass\SDK\Model\InlineResponse2005DataCompatibleModels[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'base_pn' => null,
'mfg_code' => null,
'mfg_name' => null,
'part_number' => null,
'part_description' => null,
'detailed_part_description' => null,
'weight' => null,
'length' => null,
'width' => null,
'height' => null,
'hts_code' => null,
'carrier_size' => null,
'authorization_required' => null,
'availability' => null,
'availability_by_location' => null,
'eta' => null,
'list_price' => null,
'core_price' => null,
'part_price' => null,
'total_price' => null,
'sub_part' => null,
'allow_rts' => null,
'allow_iwr' => null,
'small_image_url' => null,
'compatible_models' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_pn' => 'basePN',
'mfg_code' => 'mfgCode',
'mfg_name' => 'mfgName',
'part_number' => 'partNumber',
'part_description' => 'partDescription',
'detailed_part_description' => 'detailedPartDescription',
'weight' => 'weight',
'length' => 'length',
'width' => 'width',
'height' => 'height',
'hts_code' => 'htsCode',
'carrier_size' => 'carrierSize',
'authorization_required' => 'authorizationRequired',
'availability' => 'availability',
'availability_by_location' => 'availabilityByLocation',
'eta' => 'eta',
'list_price' => 'listPrice',
'core_price' => 'corePrice',
'part_price' => 'partPrice',
'total_price' => 'totalPrice',
'sub_part' => 'subPart',
'allow_rts' => 'allowRTS',
'allow_iwr' => 'allowIWR',
'small_image_url' => 'smallImageURL',
'compatible_models' => 'compatibleModels'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_pn' => 'setBasePn',
'mfg_code' => 'setMfgCode',
'mfg_name' => 'setMfgName',
'part_number' => 'setPartNumber',
'part_description' => 'setPartDescription',
'detailed_part_description' => 'setDetailedPartDescription',
'weight' => 'setWeight',
'length' => 'setLength',
'width' => 'setWidth',
'height' => 'setHeight',
'hts_code' => 'setHtsCode',
'carrier_size' => 'setCarrierSize',
'authorization_required' => 'setAuthorizationRequired',
'availability' => 'setAvailability',
'availability_by_location' => 'setAvailabilityByLocation',
'eta' => 'setEta',
'list_price' => 'setListPrice',
'core_price' => 'setCorePrice',
'part_price' => 'setPartPrice',
'total_price' => 'setTotalPrice',
'sub_part' => 'setSubPart',
'allow_rts' => 'setAllowRts',
'allow_iwr' => 'setAllowIwr',
'small_image_url' => 'setSmallImageUrl',
'compatible_models' => 'setCompatibleModels'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_pn' => 'getBasePn',
'mfg_code' => 'getMfgCode',
'mfg_name' => 'getMfgName',
'part_number' => 'getPartNumber',
'part_description' => 'getPartDescription',
'detailed_part_description' => 'getDetailedPartDescription',
'weight' => 'getWeight',
'length' => 'getLength',
'width' => 'getWidth',
'height' => 'getHeight',
'hts_code' => 'getHtsCode',
'carrier_size' => 'getCarrierSize',
'authorization_required' => 'getAuthorizationRequired',
'availability' => 'getAvailability',
'availability_by_location' => 'getAvailabilityByLocation',
'eta' => 'getEta',
'list_price' => 'getListPrice',
'core_price' => 'getCorePrice',
'part_price' => 'getPartPrice',
'total_price' => 'getTotalPrice',
'sub_part' => 'getSubPart',
'allow_rts' => 'getAllowRts',
'allow_iwr' => 'getAllowIwr',
'small_image_url' => 'getSmallImageUrl',
'compatible_models' => 'getCompatibleModels'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['base_pn'] = isset($data['base_pn']) ? $data['base_pn'] : null;
        $this->container['mfg_code'] = isset($data['mfg_code']) ? $data['mfg_code'] : null;
        $this->container['mfg_name'] = isset($data['mfg_name']) ? $data['mfg_name'] : null;
        $this->container['part_number'] = isset($data['part_number']) ? $data['part_number'] : null;
        $this->container['part_description'] = isset($data['part_description']) ? $data['part_description'] : null;
        $this->container['detailed_part_description'] = isset($data['detailed_part_description']) ? $data['detailed_part_description'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['hts_code'] = isset($data['hts_code']) ? $data['hts_code'] : null;
        $this->container['carrier_size'] = isset($data['carrier_size']) ? $data['carrier_size'] : null;
        $this->container['authorization_required'] = isset($data['authorization_required']) ? $data['authorization_required'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : null;
        $this->container['availability_by_location'] = isset($data['availability_by_location']) ? $data['availability_by_location'] : null;
        $this->container['eta'] = isset($data['eta']) ? $data['eta'] : null;
        $this->container['list_price'] = isset($data['list_price']) ? $data['list_price'] : null;
        $this->container['core_price'] = isset($data['core_price']) ? $data['core_price'] : null;
        $this->container['part_price'] = isset($data['part_price']) ? $data['part_price'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['sub_part'] = isset($data['sub_part']) ? $data['sub_part'] : null;
        $this->container['allow_rts'] = isset($data['allow_rts']) ? $data['allow_rts'] : null;
        $this->container['allow_iwr'] = isset($data['allow_iwr']) ? $data['allow_iwr'] : null;
        $this->container['small_image_url'] = isset($data['small_image_url']) ? $data['small_image_url'] : null;
        $this->container['compatible_models'] = isset($data['compatible_models']) ? $data['compatible_models'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_pn
     *
     * @return string
     */
    public function getBasePn()
    {
        return $this->container['base_pn'];
    }

    /**
     * Sets base_pn
     *
     * @param string $base_pn internal Encompass part id#.  If this is blank, the part cannot be ordered
     *
     * @return $this
     */
    public function setBasePn($base_pn)
    {
        $this->container['base_pn'] = $base_pn;

        return $this;
    }

    /**
     * Gets mfg_code
     *
     * @return string
     */
    public function getMfgCode()
    {
        return $this->container['mfg_code'];
    }

    /**
     * Sets mfg_code
     *
     * @param string $mfg_code manufacturer code
     *
     * @return $this
     */
    public function setMfgCode($mfg_code)
    {
        $this->container['mfg_code'] = $mfg_code;

        return $this;
    }

    /**
     * Gets mfg_name
     *
     * @return string
     */
    public function getMfgName()
    {
        return $this->container['mfg_name'];
    }

    /**
     * Sets mfg_name
     *
     * @param string $mfg_name manufacturer name
     *
     * @return $this
     */
    public function setMfgName($mfg_name)
    {
        $this->container['mfg_name'] = $mfg_name;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return string
     */
    public function getPartNumber()
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param string $part_number part number
     *
     * @return $this
     */
    public function setPartNumber($part_number)
    {
        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets part_description
     *
     * @return string
     */
    public function getPartDescription()
    {
        return $this->container['part_description'];
    }

    /**
     * Sets part_description
     *
     * @param string $part_description part description
     *
     * @return $this
     */
    public function setPartDescription($part_description)
    {
        $this->container['part_description'] = $part_description;

        return $this;
    }

    /**
     * Gets detailed_part_description
     *
     * @return string
     */
    public function getDetailedPartDescription()
    {
        return $this->container['detailed_part_description'];
    }

    /**
     * Sets detailed_part_description
     *
     * @param string $detailed_part_description detailed part description
     *
     * @return $this
     */
    public function setDetailedPartDescription($detailed_part_description)
    {
        $this->container['detailed_part_description'] = $detailed_part_description;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return string
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param string $weight weight in lbs.
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets length
     *
     * @return string
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param string $length length in inches
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string $width width in inches
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string $height height in inches
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets hts_code
     *
     * @return string
     */
    public function getHtsCode()
    {
        return $this->container['hts_code'];
    }

    /**
     * Sets hts_code
     *
     * @param string $hts_code Harmonized Tariff Schedule code used for export
     *
     * @return $this
     */
    public function setHtsCode($hts_code)
    {
        $this->container['hts_code'] = $hts_code;

        return $this;
    }

    /**
     * Gets carrier_size
     *
     * @return float
     */
    public function getCarrierSize()
    {
        return $this->container['carrier_size'];
    }

    /**
     * Sets carrier_size
     *
     * @param float $carrier_size items with a value greater than zero might incur additional freight charges |Value|Description| |-------|--------| |0|normal| |3|Dim| |1|oversized| |2|truck|
     *
     * @return $this
     */
    public function setCarrierSize($carrier_size)
    {
        $this->container['carrier_size'] = $carrier_size;

        return $this;
    }

    /**
     * Gets authorization_required
     *
     * @return string
     */
    public function getAuthorizationRequired()
    {
        return $this->container['authorization_required'];
    }

    /**
     * Sets authorization_required
     *
     * @param string $authorization_required requires manufacturer authorization # (Y/N)
     *
     * @return $this
     */
    public function setAuthorizationRequired($authorization_required)
    {
        $this->container['authorization_required'] = $authorization_required;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return string
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param string $availability quantity available to ship
     *
     * @return $this
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets availability_by_location
     *
     * @return \Encompass\SDK\Model\InlineResponse2005DataAvailabilityByLocation[]
     */
    public function getAvailabilityByLocation()
    {
        return $this->container['availability_by_location'];
    }

    /**
     * Sets availability_by_location
     *
     * @param \Encompass\SDK\Model\InlineResponse2005DataAvailabilityByLocation[] $availability_by_location array of part availability by warehouse location
     *
     * @return $this
     */
    public function setAvailabilityByLocation($availability_by_location)
    {
        $this->container['availability_by_location'] = $availability_by_location;

        return $this;
    }

    /**
     * Gets eta
     *
     * @return string
     */
    public function getEta()
    {
        return $this->container['eta'];
    }

    /**
     * Sets eta
     *
     * @param string $eta estimated ship date
     *
     * @return $this
     */
    public function setEta($eta)
    {
        $this->container['eta'] = $eta;

        return $this;
    }

    /**
     * Gets list_price
     *
     * @return string
     */
    public function getListPrice()
    {
        return $this->container['list_price'];
    }

    /**
     * Sets list_price
     *
     * @param string $list_price list / retail price for the part
     *
     * @return $this
     */
    public function setListPrice($list_price)
    {
        $this->container['list_price'] = $list_price;

        return $this;
    }

    /**
     * Gets core_price
     *
     * @return string
     */
    public function getCorePrice()
    {
        return $this->container['core_price'];
    }

    /**
     * Sets core_price
     *
     * @param string $core_price price of core (core part must be returned to receive credit)
     *
     * @return $this
     */
    public function setCorePrice($core_price)
    {
        $this->container['core_price'] = $core_price;

        return $this;
    }

    /**
     * Gets part_price
     *
     * @return string
     */
    public function getPartPrice()
    {
        return $this->container['part_price'];
    }

    /**
     * Sets part_price
     *
     * @param string $part_price your price for the part
     *
     * @return $this
     */
    public function setPartPrice($part_price)
    {
        $this->container['part_price'] = $part_price;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return string
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param string $total_price part price + core price
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets sub_part
     *
     * @return string
     */
    public function getSubPart()
    {
        return $this->container['sub_part'];
    }

    /**
     * Sets sub_part
     *
     * @param string $sub_part sub_part
     *
     * @return $this
     */
    public function setSubPart($sub_part)
    {
        $this->container['sub_part'] = $sub_part;

        return $this;
    }

    /**
     * Gets allow_rts
     *
     * @return string
     */
    public function getAllowRts()
    {
        return $this->container['allow_rts'];
    }

    /**
     * Sets allow_rts
     *
     * @param string $allow_rts allow good/unused return(Y/N)
     *
     * @return $this
     */
    public function setAllowRts($allow_rts)
    {
        $this->container['allow_rts'] = $allow_rts;

        return $this;
    }

    /**
     * Gets allow_iwr
     *
     * @return string
     */
    public function getAllowIwr()
    {
        return $this->container['allow_iwr'];
    }

    /**
     * Sets allow_iwr
     *
     * @param string $allow_iwr allow in waranty return(Y/N)
     *
     * @return $this
     */
    public function setAllowIwr($allow_iwr)
    {
        $this->container['allow_iwr'] = $allow_iwr;

        return $this;
    }

    /**
     * Gets small_image_url
     *
     * @return string
     */
    public function getSmallImageUrl()
    {
        return $this->container['small_image_url'];
    }

    /**
     * Sets small_image_url
     *
     * @param string $small_image_url URL for image
     *
     * @return $this
     */
    public function setSmallImageUrl($small_image_url)
    {
        $this->container['small_image_url'] = $small_image_url;

        return $this;
    }

    /**
     * Gets compatible_models
     *
     * @return \Encompass\SDK\Model\InlineResponse2005DataCompatibleModels[]
     */
    public function getCompatibleModels()
    {
        return $this->container['compatible_models'];
    }

    /**
     * Sets compatible_models
     *
     * @param \Encompass\SDK\Model\InlineResponse2005DataCompatibleModels[] $compatible_models models that the part is used in for parts verification
     *
     * @return $this
     */
    public function setCompatibleModels($compatible_models)
    {
        $this->container['compatible_models'] = $compatible_models;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
