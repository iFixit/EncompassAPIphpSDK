<?php
/**
 * RestfulservicereturnRequestDataParts
 *
 * PHP version 5
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Encompass Supply Chain Solutions
 *
 * Services require a user name and password that must be obtained from Encompass.  We issue a single set of credentials for all invironments.  Please make sure you are pointing to the correct endpoint described in the __servers__ section.  Services all return the elements `status->errorCode` and `status->errorMessage`.  Successful reqeusts will return a __100__ `errorCode`.   If you have any questions that are not answered here or would like to discuss the overall process, please contact your account rep to schedule a technical call.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Encompass\SDK\Model;

use \ArrayAccess;
use \Encompass\SDK\ObjectSerializer;

/**
 * RestfulservicereturnRequestDataParts Class Doc Comment
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RestfulservicereturnRequestDataParts implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'restfulservicereturnRequest_data_parts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_number' => 'string',
'base_pn' => 'string',
'return_quantity' => 'string',
'return_type' => 'string',
'reason_code' => 'string',
'model_number' => 'string',
'serial_number' => 'string',
'replacement_order_number' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_number' => null,
'base_pn' => null,
'return_quantity' => null,
'return_type' => null,
'reason_code' => null,
'model_number' => null,
'serial_number' => null,
'replacement_order_number' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_number' => 'lineNumber',
'base_pn' => 'basePN',
'return_quantity' => 'returnQuantity',
'return_type' => 'returnType',
'reason_code' => 'reasonCode',
'model_number' => 'modelNumber',
'serial_number' => 'serialNumber',
'replacement_order_number' => 'replacementOrderNumber'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_number' => 'setLineNumber',
'base_pn' => 'setBasePn',
'return_quantity' => 'setReturnQuantity',
'return_type' => 'setReturnType',
'reason_code' => 'setReasonCode',
'model_number' => 'setModelNumber',
'serial_number' => 'setSerialNumber',
'replacement_order_number' => 'setReplacementOrderNumber'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_number' => 'getLineNumber',
'base_pn' => 'getBasePn',
'return_quantity' => 'getReturnQuantity',
'return_type' => 'getReturnType',
'reason_code' => 'getReasonCode',
'model_number' => 'getModelNumber',
'serial_number' => 'getSerialNumber',
'replacement_order_number' => 'getReplacementOrderNumber'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['base_pn'] = isset($data['base_pn']) ? $data['base_pn'] : null;
        $this->container['return_quantity'] = isset($data['return_quantity']) ? $data['return_quantity'] : null;
        $this->container['return_type'] = isset($data['return_type']) ? $data['return_type'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
        $this->container['model_number'] = isset($data['model_number']) ? $data['model_number'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['replacement_order_number'] = isset($data['replacement_order_number']) ? $data['replacement_order_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['line_number'] === null) {
            $invalidProperties[] = "'line_number' can't be null";
        }
        if ($this->container['base_pn'] === null) {
            $invalidProperties[] = "'base_pn' can't be null";
        }
        if ($this->container['return_quantity'] === null) {
            $invalidProperties[] = "'return_quantity' can't be null";
        }
        if ($this->container['return_type'] === null) {
            $invalidProperties[] = "'return_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_number
     *
     * @return string
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param string $line_number `lineNumber` from `orderStatus` service
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets base_pn
     *
     * @return string
     */
    public function getBasePn()
    {
        return $this->container['base_pn'];
    }

    /**
     * Sets base_pn
     *
     * @param string $base_pn `basePN` from `orderStatus` service
     *
     * @return $this
     */
    public function setBasePn($base_pn)
    {
        $this->container['base_pn'] = $base_pn;

        return $this;
    }

    /**
     * Gets return_quantity
     *
     * @return string
     */
    public function getReturnQuantity()
    {
        return $this->container['return_quantity'];
    }

    /**
     * Sets return_quantity
     *
     * @param string $return_quantity quantity that you want to return
     *
     * @return $this
     */
    public function setReturnQuantity($return_quantity)
    {
        $this->container['return_quantity'] = $return_quantity;

        return $this;
    }

    /**
     * Gets return_type
     *
     * @return string
     */
    public function getReturnType()
    {
        return $this->container['return_type'];
    }

    /**
     * Sets return_type
     *
     * @param string $return_type Type of Return |Value|Description| |-------|--------| |1|Good & Un-used Parts| |2|Warranty / Replacement| |3|Core / Dud|
     *
     * @return $this
     */
    public function setReturnType($return_type)
    {
        $this->container['return_type'] = $return_type;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string $reason_code reason code for return _Required for Warranty / Replacement_ |Value|Description| |-------|--------| |1|No power| |2|Automatically shuts down| |4|Sound problem| |5|Intermittent power issue| |6|Picture distortion issue| |8|Compatibility issue| |9|Wrong color| |10|Physical Damage| |11|Leak Issue| |12|No Video|
     *
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets model_number
     *
     * @return string
     */
    public function getModelNumber()
    {
        return $this->container['model_number'];
    }

    /**
     * Sets model_number
     *
     * @param string $model_number model # of the product then part is returned from _Required for Warranty / Replacement_
     *
     * @return $this
     */
    public function setModelNumber($model_number)
    {
        $this->container['model_number'] = $model_number;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string $serial_number serial # of the product the part is returned from _Required for Warranty / Replacement_
     *
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets replacement_order_number
     *
     * @return string
     */
    public function getReplacementOrderNumber()
    {
        return $this->container['replacement_order_number'];
    }

    /**
     * Sets replacement_order_number
     *
     * @param string $replacement_order_number replacement order # _Required for Warranty / Replacement if the account is not setup to auto-replace_
     *
     * @return $this
     */
    public function setReplacementOrderNumber($replacement_order_number)
    {
        $this->container['replacement_order_number'] = $replacement_order_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
