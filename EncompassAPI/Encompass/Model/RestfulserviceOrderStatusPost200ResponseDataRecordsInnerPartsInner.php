<?php
/**
 * RestfulserviceOrderStatusPost200ResponseDataRecordsInnerPartsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Encompass Supply Chain Solutions
 *
 * Services require a user name and password that must be obtained from Encompass.  We issue a single set of credentials for all invironments.  Please make sure you are pointing to the correct endpoint described in the __servers__ section.  Services all return the elements `status->errorCode` and `status->errorMessage`.  Successful reqeusts will return a __100__ `errorCode`.   If you have any questions that are not answered here or would like to discuss the overall process, please contact your account rep to schedule a technical call.
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Encompass\SDK\Model;

use \ArrayAccess;
use \Encompass\SDK\ObjectSerializer;

/**
 * RestfulserviceOrderStatusPost200ResponseDataRecordsInnerPartsInner Class Doc Comment
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RestfulserviceOrderStatusPost200ResponseDataRecordsInnerPartsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_restfulservice_orderStatus_post_200_response_data_records_inner_parts_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'status' => 'string',
        'line_number' => 'float',
        'base_pn' => 'string',
        'mfg_code' => 'string',
        'mfg_name' => 'string',
        'part_number' => 'string',
        'description' => 'string',
        'order_quantity' => 'string',
        'ship_quantity' => 'string',
        'backorder_quantity' => 'string',
        'eta' => 'string',
        'unit_price' => 'string',
        'unit_core_charge' => 'string',
        'extended_price' => 'string',
        'authorization_or_reference_number' => 'string',
        'inbound_tracking' => 'string',
        'original_part_number' => 'string',
        'original_line_number' => 'string',
        'open_core' => 'string',
        'outbound_trackings' => '\Encompass\SDK\Model\RestfulserviceOrderStatusPost200ResponseDataRecordsInnerPartsInnerOutboundTrackingsInner[]',
        'custom_part_fields' => '\Encompass\SDK\Model\RestfulserviceOrderStatusPost200ResponseDataRecordsInnerPartsInnerCustomPartFieldsInner[]',
        'serial_numbers' => '\Encompass\SDK\Model\RestfulserviceOrderStatusPost200ResponseDataRecordsInnerPartsInnerSerialNumbersInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'status' => null,
        'line_number' => null,
        'base_pn' => null,
        'mfg_code' => null,
        'mfg_name' => null,
        'part_number' => null,
        'description' => null,
        'order_quantity' => null,
        'ship_quantity' => null,
        'backorder_quantity' => null,
        'eta' => null,
        'unit_price' => null,
        'unit_core_charge' => null,
        'extended_price' => null,
        'authorization_or_reference_number' => null,
        'inbound_tracking' => null,
        'original_part_number' => null,
        'original_line_number' => null,
        'open_core' => null,
        'outbound_trackings' => null,
        'custom_part_fields' => null,
        'serial_numbers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'status' => false,
        'line_number' => false,
        'base_pn' => false,
        'mfg_code' => false,
        'mfg_name' => false,
        'part_number' => false,
        'description' => false,
        'order_quantity' => false,
        'ship_quantity' => false,
        'backorder_quantity' => false,
        'eta' => false,
        'unit_price' => false,
        'unit_core_charge' => false,
        'extended_price' => false,
        'authorization_or_reference_number' => false,
        'inbound_tracking' => false,
        'original_part_number' => false,
        'original_line_number' => false,
        'open_core' => false,
        'outbound_trackings' => false,
        'custom_part_fields' => false,
        'serial_numbers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'status' => 'status',
        'line_number' => 'lineNumber',
        'base_pn' => 'basePN',
        'mfg_code' => 'mfgCode',
        'mfg_name' => 'mfgName',
        'part_number' => 'partNumber',
        'description' => 'description',
        'order_quantity' => 'orderQuantity',
        'ship_quantity' => 'shipQuantity',
        'backorder_quantity' => 'backorderQuantity',
        'eta' => 'eta',
        'unit_price' => 'unitPrice',
        'unit_core_charge' => 'unitCoreCharge',
        'extended_price' => 'extendedPrice',
        'authorization_or_reference_number' => 'authorizationOrReferenceNumber',
        'inbound_tracking' => 'inboundTracking',
        'original_part_number' => 'originalPartNumber',
        'original_line_number' => 'originalLineNumber',
        'open_core' => 'openCore',
        'outbound_trackings' => 'outboundTrackings',
        'custom_part_fields' => 'customPartFields',
        'serial_numbers' => 'serialNumbers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'status' => 'setStatus',
        'line_number' => 'setLineNumber',
        'base_pn' => 'setBasePn',
        'mfg_code' => 'setMfgCode',
        'mfg_name' => 'setMfgName',
        'part_number' => 'setPartNumber',
        'description' => 'setDescription',
        'order_quantity' => 'setOrderQuantity',
        'ship_quantity' => 'setShipQuantity',
        'backorder_quantity' => 'setBackorderQuantity',
        'eta' => 'setEta',
        'unit_price' => 'setUnitPrice',
        'unit_core_charge' => 'setUnitCoreCharge',
        'extended_price' => 'setExtendedPrice',
        'authorization_or_reference_number' => 'setAuthorizationOrReferenceNumber',
        'inbound_tracking' => 'setInboundTracking',
        'original_part_number' => 'setOriginalPartNumber',
        'original_line_number' => 'setOriginalLineNumber',
        'open_core' => 'setOpenCore',
        'outbound_trackings' => 'setOutboundTrackings',
        'custom_part_fields' => 'setCustomPartFields',
        'serial_numbers' => 'setSerialNumbers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'status' => 'getStatus',
        'line_number' => 'getLineNumber',
        'base_pn' => 'getBasePn',
        'mfg_code' => 'getMfgCode',
        'mfg_name' => 'getMfgName',
        'part_number' => 'getPartNumber',
        'description' => 'getDescription',
        'order_quantity' => 'getOrderQuantity',
        'ship_quantity' => 'getShipQuantity',
        'backorder_quantity' => 'getBackorderQuantity',
        'eta' => 'getEta',
        'unit_price' => 'getUnitPrice',
        'unit_core_charge' => 'getUnitCoreCharge',
        'extended_price' => 'getExtendedPrice',
        'authorization_or_reference_number' => 'getAuthorizationOrReferenceNumber',
        'inbound_tracking' => 'getInboundTracking',
        'original_part_number' => 'getOriginalPartNumber',
        'original_line_number' => 'getOriginalLineNumber',
        'open_core' => 'getOpenCore',
        'outbound_trackings' => 'getOutboundTrackings',
        'custom_part_fields' => 'getCustomPartFields',
        'serial_numbers' => 'getSerialNumbers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('line_number', $data ?? [], null);
        $this->setIfExists('base_pn', $data ?? [], null);
        $this->setIfExists('mfg_code', $data ?? [], null);
        $this->setIfExists('mfg_name', $data ?? [], null);
        $this->setIfExists('part_number', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('order_quantity', $data ?? [], null);
        $this->setIfExists('ship_quantity', $data ?? [], null);
        $this->setIfExists('backorder_quantity', $data ?? [], null);
        $this->setIfExists('eta', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('unit_core_charge', $data ?? [], null);
        $this->setIfExists('extended_price', $data ?? [], null);
        $this->setIfExists('authorization_or_reference_number', $data ?? [], null);
        $this->setIfExists('inbound_tracking', $data ?? [], null);
        $this->setIfExists('original_part_number', $data ?? [], null);
        $this->setIfExists('original_line_number', $data ?? [], null);
        $this->setIfExists('open_core', $data ?? [], null);
        $this->setIfExists('outbound_trackings', $data ?? [], null);
        $this->setIfExists('custom_part_fields', $data ?? [], null);
        $this->setIfExists('serial_numbers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type of item |Value|Description| |-------|--------| |ORDER|| |RETURN|| |CORE RETURN|| |CORE BILLING|| |CREDIT||
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status of item |Value|Mode|Description| |-------|--------|--------| |SHIPPING|Open|Ready to ship| |BACKORDER|Open|awaiting parts| |ON HOLD|Open|nothing will happen until hold is removed| |NOT RECEIVED|Open|return has not been received yet| |SHIPPED|Closed|item has shipped| |ISSUED|Closed|credit has been issued| |CANCELLED|Closed|item has been cancelled| |BILLED|Closed|core has been billed|
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets line_number
     *
     * @return float|null
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param float|null $line_number line# on our record
     *
     * @return self
     */
    public function setLineNumber($line_number)
    {
        if (is_null($line_number)) {
            throw new \InvalidArgumentException('non-nullable line_number cannot be null');
        }
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets base_pn
     *
     * @return string|null
     */
    public function getBasePn()
    {
        return $this->container['base_pn'];
    }

    /**
     * Sets base_pn
     *
     * @param string|null $base_pn internal Encompass part id#
     *
     * @return self
     */
    public function setBasePn($base_pn)
    {
        if (is_null($base_pn)) {
            throw new \InvalidArgumentException('non-nullable base_pn cannot be null');
        }
        $this->container['base_pn'] = $base_pn;

        return $this;
    }

    /**
     * Gets mfg_code
     *
     * @return string|null
     */
    public function getMfgCode()
    {
        return $this->container['mfg_code'];
    }

    /**
     * Sets mfg_code
     *
     * @param string|null $mfg_code manufacturer code
     *
     * @return self
     */
    public function setMfgCode($mfg_code)
    {
        if (is_null($mfg_code)) {
            throw new \InvalidArgumentException('non-nullable mfg_code cannot be null');
        }
        $this->container['mfg_code'] = $mfg_code;

        return $this;
    }

    /**
     * Gets mfg_name
     *
     * @return string|null
     */
    public function getMfgName()
    {
        return $this->container['mfg_name'];
    }

    /**
     * Sets mfg_name
     *
     * @param string|null $mfg_name manufacturer name
     *
     * @return self
     */
    public function setMfgName($mfg_name)
    {
        if (is_null($mfg_name)) {
            throw new \InvalidArgumentException('non-nullable mfg_name cannot be null');
        }
        $this->container['mfg_name'] = $mfg_name;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return string|null
     */
    public function getPartNumber()
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param string|null $part_number part number
     *
     * @return self
     */
    public function setPartNumber($part_number)
    {
        if (is_null($part_number)) {
            throw new \InvalidArgumentException('non-nullable part_number cannot be null');
        }
        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description part description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets order_quantity
     *
     * @return string|null
     */
    public function getOrderQuantity()
    {
        return $this->container['order_quantity'];
    }

    /**
     * Sets order_quantity
     *
     * @param string|null $order_quantity quantity ordered
     *
     * @return self
     */
    public function setOrderQuantity($order_quantity)
    {
        if (is_null($order_quantity)) {
            throw new \InvalidArgumentException('non-nullable order_quantity cannot be null');
        }
        $this->container['order_quantity'] = $order_quantity;

        return $this;
    }

    /**
     * Gets ship_quantity
     *
     * @return string|null
     */
    public function getShipQuantity()
    {
        return $this->container['ship_quantity'];
    }

    /**
     * Sets ship_quantity
     *
     * @param string|null $ship_quantity quantity shipped
     *
     * @return self
     */
    public function setShipQuantity($ship_quantity)
    {
        if (is_null($ship_quantity)) {
            throw new \InvalidArgumentException('non-nullable ship_quantity cannot be null');
        }
        $this->container['ship_quantity'] = $ship_quantity;

        return $this;
    }

    /**
     * Gets backorder_quantity
     *
     * @return string|null
     */
    public function getBackorderQuantity()
    {
        return $this->container['backorder_quantity'];
    }

    /**
     * Sets backorder_quantity
     *
     * @param string|null $backorder_quantity quantity on backorder
     *
     * @return self
     */
    public function setBackorderQuantity($backorder_quantity)
    {
        if (is_null($backorder_quantity)) {
            throw new \InvalidArgumentException('non-nullable backorder_quantity cannot be null');
        }
        $this->container['backorder_quantity'] = $backorder_quantity;

        return $this;
    }

    /**
     * Gets eta
     *
     * @return string|null
     */
    public function getEta()
    {
        return $this->container['eta'];
    }

    /**
     * Sets eta
     *
     * @param string|null $eta estimated time of arrival
     *
     * @return self
     */
    public function setEta($eta)
    {
        if (is_null($eta)) {
            throw new \InvalidArgumentException('non-nullable eta cannot be null');
        }
        $this->container['eta'] = $eta;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return string|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param string|null $unit_price unit price
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_core_charge
     *
     * @return string|null
     */
    public function getUnitCoreCharge()
    {
        return $this->container['unit_core_charge'];
    }

    /**
     * Sets unit_core_charge
     *
     * @param string|null $unit_core_charge unit core charge
     *
     * @return self
     */
    public function setUnitCoreCharge($unit_core_charge)
    {
        if (is_null($unit_core_charge)) {
            throw new \InvalidArgumentException('non-nullable unit_core_charge cannot be null');
        }
        $this->container['unit_core_charge'] = $unit_core_charge;

        return $this;
    }

    /**
     * Gets extended_price
     *
     * @return string|null
     */
    public function getExtendedPrice()
    {
        return $this->container['extended_price'];
    }

    /**
     * Sets extended_price
     *
     * @param string|null $extended_price extended price (unitPrice+unitCoreCharge)*shipQuantity
     *
     * @return self
     */
    public function setExtendedPrice($extended_price)
    {
        if (is_null($extended_price)) {
            throw new \InvalidArgumentException('non-nullable extended_price cannot be null');
        }
        $this->container['extended_price'] = $extended_price;

        return $this;
    }

    /**
     * Gets authorization_or_reference_number
     *
     * @return string|null
     */
    public function getAuthorizationOrReferenceNumber()
    {
        return $this->container['authorization_or_reference_number'];
    }

    /**
     * Sets authorization_or_reference_number
     *
     * @param string|null $authorization_or_reference_number part reference number or manufacturer authorization
     *
     * @return self
     */
    public function setAuthorizationOrReferenceNumber($authorization_or_reference_number)
    {
        if (is_null($authorization_or_reference_number)) {
            throw new \InvalidArgumentException('non-nullable authorization_or_reference_number cannot be null');
        }
        $this->container['authorization_or_reference_number'] = $authorization_or_reference_number;

        return $this;
    }

    /**
     * Gets inbound_tracking
     *
     * @return string|null
     */
    public function getInboundTracking()
    {
        return $this->container['inbound_tracking'];
    }

    /**
     * Sets inbound_tracking
     *
     * @param string|null $inbound_tracking tracking number for a return package
     *
     * @return self
     */
    public function setInboundTracking($inbound_tracking)
    {
        if (is_null($inbound_tracking)) {
            throw new \InvalidArgumentException('non-nullable inbound_tracking cannot be null');
        }
        $this->container['inbound_tracking'] = $inbound_tracking;

        return $this;
    }

    /**
     * Gets original_part_number
     *
     * @return string|null
     */
    public function getOriginalPartNumber()
    {
        return $this->container['original_part_number'];
    }

    /**
     * Sets original_part_number
     *
     * @param string|null $original_part_number original Part Number
     *
     * @return self
     */
    public function setOriginalPartNumber($original_part_number)
    {
        if (is_null($original_part_number)) {
            throw new \InvalidArgumentException('non-nullable original_part_number cannot be null');
        }
        $this->container['original_part_number'] = $original_part_number;

        return $this;
    }

    /**
     * Gets original_line_number
     *
     * @return string|null
     */
    public function getOriginalLineNumber()
    {
        return $this->container['original_line_number'];
    }

    /**
     * Sets original_line_number
     *
     * @param string|null $original_line_number original line number from the order request.  If you sent us 5 parts numbers, and we split to multiple warehouses, you would still see 1-5, but on separate orders / invoices
     *
     * @return self
     */
    public function setOriginalLineNumber($original_line_number)
    {
        if (is_null($original_line_number)) {
            throw new \InvalidArgumentException('non-nullable original_line_number cannot be null');
        }
        $this->container['original_line_number'] = $original_line_number;

        return $this;
    }

    /**
     * Gets open_core
     *
     * @return string|null
     */
    public function getOpenCore()
    {
        return $this->container['open_core'];
    }

    /**
     * Sets open_core
     *
     * @param string|null $open_core items has an open core (Y/N)
     *
     * @return self
     */
    public function setOpenCore($open_core)
    {
        if (is_null($open_core)) {
            throw new \InvalidArgumentException('non-nullable open_core cannot be null');
        }
        $this->container['open_core'] = $open_core;

        return $this;
    }

    /**
     * Gets outbound_trackings
     *
     * @return \Encompass\SDK\Model\RestfulserviceOrderStatusPost200ResponseDataRecordsInnerPartsInnerOutboundTrackingsInner[]|null
     */
    public function getOutboundTrackings()
    {
        return $this->container['outbound_trackings'];
    }

    /**
     * Sets outbound_trackings
     *
     * @param \Encompass\SDK\Model\RestfulserviceOrderStatusPost200ResponseDataRecordsInnerPartsInnerOutboundTrackingsInner[]|null $outbound_trackings array of outbound tracking details
     *
     * @return self
     */
    public function setOutboundTrackings($outbound_trackings)
    {
        if (is_null($outbound_trackings)) {
            throw new \InvalidArgumentException('non-nullable outbound_trackings cannot be null');
        }
        $this->container['outbound_trackings'] = $outbound_trackings;

        return $this;
    }

    /**
     * Gets custom_part_fields
     *
     * @return \Encompass\SDK\Model\RestfulserviceOrderStatusPost200ResponseDataRecordsInnerPartsInnerCustomPartFieldsInner[]|null
     */
    public function getCustomPartFields()
    {
        return $this->container['custom_part_fields'];
    }

    /**
     * Sets custom_part_fields
     *
     * @param \Encompass\SDK\Model\RestfulserviceOrderStatusPost200ResponseDataRecordsInnerPartsInnerCustomPartFieldsInner[]|null $custom_part_fields array of custom values that will be returned at the part level if they were provided during the order process
     *
     * @return self
     */
    public function setCustomPartFields($custom_part_fields)
    {
        if (is_null($custom_part_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_part_fields cannot be null');
        }
        $this->container['custom_part_fields'] = $custom_part_fields;

        return $this;
    }

    /**
     * Gets serial_numbers
     *
     * @return \Encompass\SDK\Model\RestfulserviceOrderStatusPost200ResponseDataRecordsInnerPartsInnerSerialNumbersInner[]|null
     */
    public function getSerialNumbers()
    {
        return $this->container['serial_numbers'];
    }

    /**
     * Sets serial_numbers
     *
     * @param \Encompass\SDK\Model\RestfulserviceOrderStatusPost200ResponseDataRecordsInnerPartsInnerSerialNumbersInner[]|null $serial_numbers array of product serial numbers sold
     *
     * @return self
     */
    public function setSerialNumbers($serial_numbers)
    {
        if (is_null($serial_numbers)) {
            throw new \InvalidArgumentException('non-nullable serial_numbers cannot be null');
        }
        $this->container['serial_numbers'] = $serial_numbers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


