<?php
/**
 * RestfulserviceOrderStatusPost200ResponseDataRecordsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Encompass Supply Chain Solutions
 *
 * Services require a user name and password that must be obtained from Encompass.  We issue a single set of credentials for all invironments.  Please make sure you are pointing to the correct endpoint described in the __servers__ section.  Services all return the elements `status->errorCode` and `status->errorMessage`.  Successful reqeusts will return a __100__ `errorCode`.   If you have any questions that are not answered here or would like to discuss the overall process, please contact your account rep to schedule a technical call.
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Encompass\SDK\Model;

use \ArrayAccess;
use \Encompass\SDK\ObjectSerializer;

/**
 * RestfulserviceOrderStatusPost200ResponseDataRecordsInner Class Doc Comment
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RestfulserviceOrderStatusPost200ResponseDataRecordsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_restfulservice_orderStatus_post_200_response_data_records_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'open' => 'string',
        'reference_number1' => 'string',
        'reference_number2' => 'string',
        'order_number' => 'string',
        'order_date' => '\DateTime',
        'invoice_number' => 'string',
        'invoice_date' => '\DateTime',
        'freight_amount' => 'string',
        'tax_amount' => 'string',
        'total_amount' => 'string',
        'carrier_name' => 'string',
        'shipping_method' => 'string',
        'days' => 'float',
        'parts' => '\Encompass\SDK\Model\RestfulserviceOrderStatusPost200ResponseDataRecordsInnerPartsInner[]',
        'custom_order_fields' => '\Encompass\SDK\Model\RestfulserviceCreateOrderPostRequestDataPartsInnerCustomPartFieldsInner[]',
        'carrier_activity' => '\Encompass\SDK\Model\RestfulserviceOrderStatusPost200ResponseDataRecordsInnerCarrierActivity'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'open' => null,
        'reference_number1' => null,
        'reference_number2' => null,
        'order_number' => null,
        'order_date' => 'date',
        'invoice_number' => null,
        'invoice_date' => 'date',
        'freight_amount' => null,
        'tax_amount' => null,
        'total_amount' => null,
        'carrier_name' => null,
        'shipping_method' => null,
        'days' => null,
        'parts' => null,
        'custom_order_fields' => null,
        'carrier_activity' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'open' => false,
        'reference_number1' => false,
        'reference_number2' => false,
        'order_number' => false,
        'order_date' => false,
        'invoice_number' => false,
        'invoice_date' => false,
        'freight_amount' => false,
        'tax_amount' => false,
        'total_amount' => false,
        'carrier_name' => false,
        'shipping_method' => false,
        'days' => false,
        'parts' => false,
        'custom_order_fields' => false,
        'carrier_activity' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'open' => 'open',
        'reference_number1' => 'referenceNumber1',
        'reference_number2' => 'referenceNumber2',
        'order_number' => 'orderNumber',
        'order_date' => 'orderDate',
        'invoice_number' => 'invoiceNumber',
        'invoice_date' => 'invoiceDate',
        'freight_amount' => 'freightAmount',
        'tax_amount' => 'taxAmount',
        'total_amount' => 'totalAmount',
        'carrier_name' => 'carrierName',
        'shipping_method' => 'shippingMethod',
        'days' => 'days',
        'parts' => 'parts',
        'custom_order_fields' => 'customOrderFields',
        'carrier_activity' => 'carrierActivity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'open' => 'setOpen',
        'reference_number1' => 'setReferenceNumber1',
        'reference_number2' => 'setReferenceNumber2',
        'order_number' => 'setOrderNumber',
        'order_date' => 'setOrderDate',
        'invoice_number' => 'setInvoiceNumber',
        'invoice_date' => 'setInvoiceDate',
        'freight_amount' => 'setFreightAmount',
        'tax_amount' => 'setTaxAmount',
        'total_amount' => 'setTotalAmount',
        'carrier_name' => 'setCarrierName',
        'shipping_method' => 'setShippingMethod',
        'days' => 'setDays',
        'parts' => 'setParts',
        'custom_order_fields' => 'setCustomOrderFields',
        'carrier_activity' => 'setCarrierActivity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'open' => 'getOpen',
        'reference_number1' => 'getReferenceNumber1',
        'reference_number2' => 'getReferenceNumber2',
        'order_number' => 'getOrderNumber',
        'order_date' => 'getOrderDate',
        'invoice_number' => 'getInvoiceNumber',
        'invoice_date' => 'getInvoiceDate',
        'freight_amount' => 'getFreightAmount',
        'tax_amount' => 'getTaxAmount',
        'total_amount' => 'getTotalAmount',
        'carrier_name' => 'getCarrierName',
        'shipping_method' => 'getShippingMethod',
        'days' => 'getDays',
        'parts' => 'getParts',
        'custom_order_fields' => 'getCustomOrderFields',
        'carrier_activity' => 'getCarrierActivity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('open', $data ?? [], null);
        $this->setIfExists('reference_number1', $data ?? [], null);
        $this->setIfExists('reference_number2', $data ?? [], null);
        $this->setIfExists('order_number', $data ?? [], null);
        $this->setIfExists('order_date', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('invoice_date', $data ?? [], null);
        $this->setIfExists('freight_amount', $data ?? [], null);
        $this->setIfExists('tax_amount', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('carrier_name', $data ?? [], null);
        $this->setIfExists('shipping_method', $data ?? [], null);
        $this->setIfExists('days', $data ?? [], null);
        $this->setIfExists('parts', $data ?? [], null);
        $this->setIfExists('custom_order_fields', $data ?? [], null);
        $this->setIfExists('carrier_activity', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets open
     *
     * @return string|null
     */
    public function getOpen()
    {
        return $this->container['open'];
    }

    /**
     * Sets open
     *
     * @param string|null $open order or invoice has open items (Y/N)
     *
     * @return self
     */
    public function setOpen($open)
    {
        if (is_null($open)) {
            throw new \InvalidArgumentException('non-nullable open cannot be null');
        }
        $this->container['open'] = $open;

        return $this;
    }

    /**
     * Gets reference_number1
     *
     * @return string|null
     */
    public function getReferenceNumber1()
    {
        return $this->container['reference_number1'];
    }

    /**
     * Sets reference_number1
     *
     * @param string|null $reference_number1 main reference number
     *
     * @return self
     */
    public function setReferenceNumber1($reference_number1)
    {
        if (is_null($reference_number1)) {
            throw new \InvalidArgumentException('non-nullable reference_number1 cannot be null');
        }
        $this->container['reference_number1'] = $reference_number1;

        return $this;
    }

    /**
     * Gets reference_number2
     *
     * @return string|null
     */
    public function getReferenceNumber2()
    {
        return $this->container['reference_number2'];
    }

    /**
     * Sets reference_number2
     *
     * @param string|null $reference_number2 main reference number or claim number
     *
     * @return self
     */
    public function setReferenceNumber2($reference_number2)
    {
        if (is_null($reference_number2)) {
            throw new \InvalidArgumentException('non-nullable reference_number2 cannot be null');
        }
        $this->container['reference_number2'] = $reference_number2;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string|null
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string|null $order_number 
     *
     * @return self
     */
    public function setOrderNumber($order_number)
    {
        if (is_null($order_number)) {
            throw new \InvalidArgumentException('non-nullable order_number cannot be null');
        }
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime|null
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime|null $order_date 
     *
     * @return self
     */
    public function setOrderDate($order_date)
    {
        if (is_null($order_date)) {
            throw new \InvalidArgumentException('non-nullable order_date cannot be null');
        }
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string|null $invoice_number 
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime|null
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime|null $invoice_date 
     *
     * @return self
     */
    public function setInvoiceDate($invoice_date)
    {
        if (is_null($invoice_date)) {
            throw new \InvalidArgumentException('non-nullable invoice_date cannot be null');
        }
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets freight_amount
     *
     * @return string|null
     */
    public function getFreightAmount()
    {
        return $this->container['freight_amount'];
    }

    /**
     * Sets freight_amount
     *
     * @param string|null $freight_amount 
     *
     * @return self
     */
    public function setFreightAmount($freight_amount)
    {
        if (is_null($freight_amount)) {
            throw new \InvalidArgumentException('non-nullable freight_amount cannot be null');
        }
        $this->container['freight_amount'] = $freight_amount;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return string|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param string|null $tax_amount 
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        if (is_null($tax_amount)) {
            throw new \InvalidArgumentException('non-nullable tax_amount cannot be null');
        }
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return string|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param string|null $total_amount 
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets carrier_name
     *
     * @return string|null
     */
    public function getCarrierName()
    {
        return $this->container['carrier_name'];
    }

    /**
     * Sets carrier_name
     *
     * @param string|null $carrier_name carrier name
     *
     * @return self
     */
    public function setCarrierName($carrier_name)
    {
        if (is_null($carrier_name)) {
            throw new \InvalidArgumentException('non-nullable carrier_name cannot be null');
        }
        $this->container['carrier_name'] = $carrier_name;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string|null
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string|null $shipping_method shipping service
     *
     * @return self
     */
    public function setShippingMethod($shipping_method)
    {
        if (is_null($shipping_method)) {
            throw new \InvalidArgumentException('non-nullable shipping_method cannot be null');
        }
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets days
     *
     * @return float|null
     */
    public function getDays()
    {
        return $this->container['days'];
    }

    /**
     * Sets days
     *
     * @param float|null $days number of days old
     *
     * @return self
     */
    public function setDays($days)
    {
        if (is_null($days)) {
            throw new \InvalidArgumentException('non-nullable days cannot be null');
        }
        $this->container['days'] = $days;

        return $this;
    }

    /**
     * Gets parts
     *
     * @return \Encompass\SDK\Model\RestfulserviceOrderStatusPost200ResponseDataRecordsInnerPartsInner[]|null
     */
    public function getParts()
    {
        return $this->container['parts'];
    }

    /**
     * Sets parts
     *
     * @param \Encompass\SDK\Model\RestfulserviceOrderStatusPost200ResponseDataRecordsInnerPartsInner[]|null $parts array of part details
     *
     * @return self
     */
    public function setParts($parts)
    {
        if (is_null($parts)) {
            throw new \InvalidArgumentException('non-nullable parts cannot be null');
        }
        $this->container['parts'] = $parts;

        return $this;
    }

    /**
     * Gets custom_order_fields
     *
     * @return \Encompass\SDK\Model\RestfulserviceCreateOrderPostRequestDataPartsInnerCustomPartFieldsInner[]|null
     */
    public function getCustomOrderFields()
    {
        return $this->container['custom_order_fields'];
    }

    /**
     * Sets custom_order_fields
     *
     * @param \Encompass\SDK\Model\RestfulserviceCreateOrderPostRequestDataPartsInnerCustomPartFieldsInner[]|null $custom_order_fields array of values that will be returned at the order level if they were provided during the order process
     *
     * @return self
     */
    public function setCustomOrderFields($custom_order_fields)
    {
        if (is_null($custom_order_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_order_fields cannot be null');
        }
        $this->container['custom_order_fields'] = $custom_order_fields;

        return $this;
    }

    /**
     * Gets carrier_activity
     *
     * @return \Encompass\SDK\Model\RestfulserviceOrderStatusPost200ResponseDataRecordsInnerCarrierActivity|null
     */
    public function getCarrierActivity()
    {
        return $this->container['carrier_activity'];
    }

    /**
     * Sets carrier_activity
     *
     * @param \Encompass\SDK\Model\RestfulserviceOrderStatusPost200ResponseDataRecordsInnerCarrierActivity|null $carrier_activity carrier_activity
     *
     * @return self
     */
    public function setCarrierActivity($carrier_activity)
    {
        if (is_null($carrier_activity)) {
            throw new \InvalidArgumentException('non-nullable carrier_activity cannot be null');
        }
        $this->container['carrier_activity'] = $carrier_activity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


