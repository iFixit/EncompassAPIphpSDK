<?php
/**
 * RestfulserviceSearchPost200ResponseData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Encompass Supply Chain Solutions
 *
 * Services require a user name and password that must be obtained from Encompass.  We issue a single set of credentials for all invironments.  Please make sure you are pointing to the correct endpoint described in the __servers__ section.  Services all return the elements `status->errorCode` and `status->errorMessage`.  Successful reqeusts will return a __100__ `errorCode`.   If you have any questions that are not answered here or would like to discuss the overall process, please contact your account rep to schedule a technical call.
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Encompass\SDK\Model;

use \ArrayAccess;
use \Encompass\SDK\ObjectSerializer;

/**
 * RestfulserviceSearchPost200ResponseData Class Doc Comment
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RestfulserviceSearchPost200ResponseData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_restfulservice_search_post_200_response_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number_of_parts' => 'float',
        'number_of_models' => 'float',
        'total_items' => 'float',
        'parts' => '\Encompass\SDK\Model\RestfulserviceSearchPost200ResponseDataPartsInner[]',
        'models' => '\Encompass\SDK\Model\RestfulserviceSearchPost200ResponseDataModelsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number_of_parts' => null,
        'number_of_models' => null,
        'total_items' => null,
        'parts' => null,
        'models' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'number_of_parts' => false,
        'number_of_models' => false,
        'total_items' => false,
        'parts' => false,
        'models' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number_of_parts' => 'numberOfParts',
        'number_of_models' => 'numberOfModels',
        'total_items' => 'totalItems',
        'parts' => 'parts',
        'models' => 'models'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number_of_parts' => 'setNumberOfParts',
        'number_of_models' => 'setNumberOfModels',
        'total_items' => 'setTotalItems',
        'parts' => 'setParts',
        'models' => 'setModels'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number_of_parts' => 'getNumberOfParts',
        'number_of_models' => 'getNumberOfModels',
        'total_items' => 'getTotalItems',
        'parts' => 'getParts',
        'models' => 'getModels'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('number_of_parts', $data ?? [], null);
        $this->setIfExists('number_of_models', $data ?? [], null);
        $this->setIfExists('total_items', $data ?? [], null);
        $this->setIfExists('parts', $data ?? [], null);
        $this->setIfExists('models', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number_of_parts
     *
     * @return float|null
     */
    public function getNumberOfParts()
    {
        return $this->container['number_of_parts'];
    }

    /**
     * Sets number_of_parts
     *
     * @param float|null $number_of_parts number_of_parts
     *
     * @return self
     */
    public function setNumberOfParts($number_of_parts)
    {
        if (is_null($number_of_parts)) {
            throw new \InvalidArgumentException('non-nullable number_of_parts cannot be null');
        }
        $this->container['number_of_parts'] = $number_of_parts;

        return $this;
    }

    /**
     * Gets number_of_models
     *
     * @return float|null
     */
    public function getNumberOfModels()
    {
        return $this->container['number_of_models'];
    }

    /**
     * Sets number_of_models
     *
     * @param float|null $number_of_models number_of_models
     *
     * @return self
     */
    public function setNumberOfModels($number_of_models)
    {
        if (is_null($number_of_models)) {
            throw new \InvalidArgumentException('non-nullable number_of_models cannot be null');
        }
        $this->container['number_of_models'] = $number_of_models;

        return $this;
    }

    /**
     * Gets total_items
     *
     * @return float|null
     */
    public function getTotalItems()
    {
        return $this->container['total_items'];
    }

    /**
     * Sets total_items
     *
     * @param float|null $total_items total_items
     *
     * @return self
     */
    public function setTotalItems($total_items)
    {
        if (is_null($total_items)) {
            throw new \InvalidArgumentException('non-nullable total_items cannot be null');
        }
        $this->container['total_items'] = $total_items;

        return $this;
    }

    /**
     * Gets parts
     *
     * @return \Encompass\SDK\Model\RestfulserviceSearchPost200ResponseDataPartsInner[]|null
     */
    public function getParts()
    {
        return $this->container['parts'];
    }

    /**
     * Sets parts
     *
     * @param \Encompass\SDK\Model\RestfulserviceSearchPost200ResponseDataPartsInner[]|null $parts array of part details
     *
     * @return self
     */
    public function setParts($parts)
    {
        if (is_null($parts)) {
            throw new \InvalidArgumentException('non-nullable parts cannot be null');
        }
        $this->container['parts'] = $parts;

        return $this;
    }

    /**
     * Gets models
     *
     * @return \Encompass\SDK\Model\RestfulserviceSearchPost200ResponseDataModelsInner[]|null
     */
    public function getModels()
    {
        return $this->container['models'];
    }

    /**
     * Sets models
     *
     * @param \Encompass\SDK\Model\RestfulserviceSearchPost200ResponseDataModelsInner[]|null $models array of model details
     *
     * @return self
     */
    public function setModels($models)
    {
        if (is_null($models)) {
            throw new \InvalidArgumentException('non-nullable models cannot be null');
        }
        $this->container['models'] = $models;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


