<?php
/**
 * RestfulservicepartsInformationData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Encompass Supply Chain Solutions
 *
 * Services require a user name and password that must be obtained from Encompass.  We issue a single set of credentials for all invironments.  Please make sure you are pointing to the correct endpoint described in the __servers__ section.  Services all return the elements `status->errorCode` and `status->errorMessage`.  Successful reqeusts will return a __100__ `errorCode`.   If you have any questions that are not answered here or would like to discuss the overall process, please contact your account rep to schedule a technical call.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Encompass\SDK\Model;

use \ArrayAccess;
use \Encompass\SDK\ObjectSerializer;

/**
 * RestfulservicepartsInformationData Class Doc Comment
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RestfulservicepartsInformationData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'restfulservicepartsInformation_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'base_pn' => 'string',
        'search_mfg_code' => 'string',
        'search_part_number' => 'string',
        'service_level' => 'string',
        'destination_zip_code' => 'string',
        'destination_country' => 'string',
        'bid_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'base_pn' => null,
        'search_mfg_code' => null,
        'search_part_number' => null,
        'service_level' => null,
        'destination_zip_code' => null,
        'destination_country' => null,
        'bid_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_pn' => 'basePN',
        'search_mfg_code' => 'searchMfgCode',
        'search_part_number' => 'searchPartNumber',
        'service_level' => 'serviceLevel',
        'destination_zip_code' => 'destinationZipCode',
        'destination_country' => 'destinationCountry',
        'bid_number' => 'bidNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_pn' => 'setBasePn',
        'search_mfg_code' => 'setSearchMfgCode',
        'search_part_number' => 'setSearchPartNumber',
        'service_level' => 'setServiceLevel',
        'destination_zip_code' => 'setDestinationZipCode',
        'destination_country' => 'setDestinationCountry',
        'bid_number' => 'setBidNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_pn' => 'getBasePn',
        'search_mfg_code' => 'getSearchMfgCode',
        'search_part_number' => 'getSearchPartNumber',
        'service_level' => 'getServiceLevel',
        'destination_zip_code' => 'getDestinationZipCode',
        'destination_country' => 'getDestinationCountry',
        'bid_number' => 'getBidNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['base_pn'] = isset($data['base_pn']) ? $data['base_pn'] : null;
        $this->container['search_mfg_code'] = isset($data['search_mfg_code']) ? $data['search_mfg_code'] : null;
        $this->container['search_part_number'] = isset($data['search_part_number']) ? $data['search_part_number'] : null;
        $this->container['service_level'] = isset($data['service_level']) ? $data['service_level'] : null;
        $this->container['destination_zip_code'] = isset($data['destination_zip_code']) ? $data['destination_zip_code'] : null;
        $this->container['destination_country'] = isset($data['destination_country']) ? $data['destination_country'] : null;
        $this->container['bid_number'] = isset($data['bid_number']) ? $data['bid_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_pn
     *
     * @return string
     */
    public function getBasePn()
    {
        return $this->container['base_pn'];
    }

    /**
     * Sets base_pn
     *
     * @param string $base_pn internal Encompass part id# `basePN` returned from `search` service
     *
     * @return $this
     */
    public function setBasePn($base_pn)
    {
        $this->container['base_pn'] = $base_pn;

        return $this;
    }

    /**
     * Gets search_mfg_code
     *
     * @return string
     */
    public function getSearchMfgCode()
    {
        return $this->container['search_mfg_code'];
    }

    /**
     * Sets search_mfg_code
     *
     * @param string $search_mfg_code 3 character manufacturer code
     *
     * @return $this
     */
    public function setSearchMfgCode($search_mfg_code)
    {
        $this->container['search_mfg_code'] = $search_mfg_code;

        return $this;
    }

    /**
     * Gets search_part_number
     *
     * @return string
     */
    public function getSearchPartNumber()
    {
        return $this->container['search_part_number'];
    }

    /**
     * Sets search_part_number
     *
     * @param string $search_part_number part number to search
     *
     * @return $this
     */
    public function setSearchPartNumber($search_part_number)
    {
        $this->container['search_part_number'] = $search_part_number;

        return $this;
    }

    /**
     * Gets service_level
     *
     * @return string
     */
    public function getServiceLevel()
    {
        return $this->container['service_level'];
    }

    /**
     * Sets service_level
     *
     * @param string $service_level shipping service level used to calculate `estimatedDeliveryDate` - valid in the US only |Value|Description| |-------|--------| |1|Next Day| |2|2 Day| |3|Ground|
     *
     * @return $this
     */
    public function setServiceLevel($service_level)
    {
        $this->container['service_level'] = $service_level;

        return $this;
    }

    /**
     * Gets destination_zip_code
     *
     * @return string
     */
    public function getDestinationZipCode()
    {
        return $this->container['destination_zip_code'];
    }

    /**
     * Sets destination_zip_code
     *
     * @param string $destination_zip_code destination zip code used to calculate `estimatedDeliveryDate`
     *
     * @return $this
     */
    public function setDestinationZipCode($destination_zip_code)
    {
        $this->container['destination_zip_code'] = $destination_zip_code;

        return $this;
    }

    /**
     * Gets destination_country
     *
     * @return string
     */
    public function getDestinationCountry()
    {
        return $this->container['destination_country'];
    }

    /**
     * Sets destination_country
     *
     * @param string $destination_country destination country code used to calculate `estimatedDeliveryDate`
     *
     * @return $this
     */
    public function setDestinationCountry($destination_country)
    {
        $this->container['destination_country'] = $destination_country;

        return $this;
    }

    /**
     * Gets bid_number
     *
     * @return string
     */
    public function getBidNumber()
    {
        return $this->container['bid_number'];
    }

    /**
     * Sets bid_number
     *
     * @param string $bid_number bid number
     *
     * @return $this
     */
    public function setBidNumber($bid_number)
    {
        $this->container['bid_number'] = $bid_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
