<?php
/**
 * RestfulserviceCreateOrderPostRequestData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Encompass Supply Chain Solutions
 *
 * Services require a user name and password that must be obtained from Encompass.  We issue a single set of credentials for all invironments.  Please make sure you are pointing to the correct endpoint described in the __servers__ section.  Services all return the elements `status->errorCode` and `status->errorMessage`.  Successful reqeusts will return a __100__ `errorCode`.   If you have any questions that are not answered here or would like to discuss the overall process, please contact your account rep to schedule a technical call.
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Encompass\SDK\Model;

use \ArrayAccess;
use \Encompass\SDK\ObjectSerializer;

/**
 * RestfulserviceCreateOrderPostRequestData Class Doc Comment
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RestfulserviceCreateOrderPostRequestData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_restfulservice_createOrder_post_request_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer_type' => 'string',
        'use_customer_cross' => 'string',
        'reference_number1' => 'string',
        'transaction_id' => 'string',
        'reference_number2' => 'string',
        'shipping_method' => 'string',
        'shipping_third_party_number' => 'string',
        'shipping_third_party_carrier' => 'string',
        'blind_ship' => 'string',
        'residential_address' => 'string',
        'require_signature' => 'string',
        'ship_complete' => 'string',
        'ship_to_address' => '\Encompass\SDK\Model\RestfulserviceCreateOrderPostRequestDataShipToAddress',
        'request_return_service' => 'string',
        'email_address' => 'string',
        'request_location_number' => 'string',
        'asf_override' => 'string',
        'claim_date' => 'string',
        'parts' => '\Encompass\SDK\Model\RestfulserviceCreateOrderPostRequestDataPartsInner[]',
        'custom_order_fields' => '\Encompass\SDK\Model\RestfulserviceCreateOrderPostRequestDataPartsInnerCustomPartFieldsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer_type' => null,
        'use_customer_cross' => null,
        'reference_number1' => null,
        'transaction_id' => null,
        'reference_number2' => null,
        'shipping_method' => null,
        'shipping_third_party_number' => null,
        'shipping_third_party_carrier' => null,
        'blind_ship' => null,
        'residential_address' => null,
        'require_signature' => null,
        'ship_complete' => null,
        'ship_to_address' => null,
        'request_return_service' => null,
        'email_address' => null,
        'request_location_number' => null,
        'asf_override' => null,
        'claim_date' => null,
        'parts' => null,
        'custom_order_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'customer_type' => false,
        'use_customer_cross' => false,
        'reference_number1' => false,
        'transaction_id' => false,
        'reference_number2' => false,
        'shipping_method' => false,
        'shipping_third_party_number' => false,
        'shipping_third_party_carrier' => false,
        'blind_ship' => false,
        'residential_address' => false,
        'require_signature' => false,
        'ship_complete' => false,
        'ship_to_address' => false,
        'request_return_service' => false,
        'email_address' => false,
        'request_location_number' => false,
        'asf_override' => false,
        'claim_date' => false,
        'parts' => false,
        'custom_order_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_type' => 'customerType',
        'use_customer_cross' => 'useCustomerCross',
        'reference_number1' => 'referenceNumber1',
        'transaction_id' => 'transactionID',
        'reference_number2' => 'referenceNumber2',
        'shipping_method' => 'shippingMethod',
        'shipping_third_party_number' => 'shippingThirdPartyNumber',
        'shipping_third_party_carrier' => 'shippingThirdPartyCarrier',
        'blind_ship' => 'blindShip',
        'residential_address' => 'residentialAddress',
        'require_signature' => 'requireSignature',
        'ship_complete' => 'shipComplete',
        'ship_to_address' => 'shipToAddress',
        'request_return_service' => 'requestReturnService',
        'email_address' => 'emailAddress',
        'request_location_number' => 'requestLocationNumber',
        'asf_override' => 'asfOverride',
        'claim_date' => 'claimDate',
        'parts' => 'parts',
        'custom_order_fields' => 'customOrderFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_type' => 'setCustomerType',
        'use_customer_cross' => 'setUseCustomerCross',
        'reference_number1' => 'setReferenceNumber1',
        'transaction_id' => 'setTransactionId',
        'reference_number2' => 'setReferenceNumber2',
        'shipping_method' => 'setShippingMethod',
        'shipping_third_party_number' => 'setShippingThirdPartyNumber',
        'shipping_third_party_carrier' => 'setShippingThirdPartyCarrier',
        'blind_ship' => 'setBlindShip',
        'residential_address' => 'setResidentialAddress',
        'require_signature' => 'setRequireSignature',
        'ship_complete' => 'setShipComplete',
        'ship_to_address' => 'setShipToAddress',
        'request_return_service' => 'setRequestReturnService',
        'email_address' => 'setEmailAddress',
        'request_location_number' => 'setRequestLocationNumber',
        'asf_override' => 'setAsfOverride',
        'claim_date' => 'setClaimDate',
        'parts' => 'setParts',
        'custom_order_fields' => 'setCustomOrderFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_type' => 'getCustomerType',
        'use_customer_cross' => 'getUseCustomerCross',
        'reference_number1' => 'getReferenceNumber1',
        'transaction_id' => 'getTransactionId',
        'reference_number2' => 'getReferenceNumber2',
        'shipping_method' => 'getShippingMethod',
        'shipping_third_party_number' => 'getShippingThirdPartyNumber',
        'shipping_third_party_carrier' => 'getShippingThirdPartyCarrier',
        'blind_ship' => 'getBlindShip',
        'residential_address' => 'getResidentialAddress',
        'require_signature' => 'getRequireSignature',
        'ship_complete' => 'getShipComplete',
        'ship_to_address' => 'getShipToAddress',
        'request_return_service' => 'getRequestReturnService',
        'email_address' => 'getEmailAddress',
        'request_location_number' => 'getRequestLocationNumber',
        'asf_override' => 'getAsfOverride',
        'claim_date' => 'getClaimDate',
        'parts' => 'getParts',
        'custom_order_fields' => 'getCustomOrderFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('customer_type', $data ?? [], null);
        $this->setIfExists('use_customer_cross', $data ?? [], null);
        $this->setIfExists('reference_number1', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('reference_number2', $data ?? [], null);
        $this->setIfExists('shipping_method', $data ?? [], null);
        $this->setIfExists('shipping_third_party_number', $data ?? [], null);
        $this->setIfExists('shipping_third_party_carrier', $data ?? [], null);
        $this->setIfExists('blind_ship', $data ?? [], null);
        $this->setIfExists('residential_address', $data ?? [], null);
        $this->setIfExists('require_signature', $data ?? [], null);
        $this->setIfExists('ship_complete', $data ?? [], null);
        $this->setIfExists('ship_to_address', $data ?? [], null);
        $this->setIfExists('request_return_service', $data ?? [], null);
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('request_location_number', $data ?? [], null);
        $this->setIfExists('asf_override', $data ?? [], null);
        $this->setIfExists('claim_date', $data ?? [], null);
        $this->setIfExists('parts', $data ?? [], null);
        $this->setIfExists('custom_order_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['reference_number1'] === null) {
            $invalidProperties[] = "'reference_number1' can't be null";
        }
        if ($this->container['ship_to_address'] === null) {
            $invalidProperties[] = "'ship_to_address' can't be null";
        }
        if (!is_null($this->container['asf_override']) && (mb_strlen($this->container['asf_override']) > 15)) {
            $invalidProperties[] = "invalid value for 'asf_override', the character length must be smaller than or equal to 15.";
        }

        if ($this->container['parts'] === null) {
            $invalidProperties[] = "'parts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_type
     *
     * @return string|null
     */
    public function getCustomerType()
    {
        return $this->container['customer_type'];
    }

    /**
     * Sets customer_type
     *
     * @param string|null $customer_type customer type (not used for all accounts)
     *
     * @return self
     */
    public function setCustomerType($customer_type)
    {
        if (is_null($customer_type)) {
            throw new \InvalidArgumentException('non-nullable customer_type cannot be null');
        }
        $this->container['customer_type'] = $customer_type;

        return $this;
    }

    /**
     * Gets use_customer_cross
     *
     * @return string|null
     */
    public function getUseCustomerCross()
    {
        return $this->container['use_customer_cross'];
    }

    /**
     * Sets use_customer_cross
     *
     * @param string|null $use_customer_cross map your customer number to ours (not available for all accounts) (y/n)
     *
     * @return self
     */
    public function setUseCustomerCross($use_customer_cross)
    {
        if (is_null($use_customer_cross)) {
            throw new \InvalidArgumentException('non-nullable use_customer_cross cannot be null');
        }
        $this->container['use_customer_cross'] = $use_customer_cross;

        return $this;
    }

    /**
     * Gets reference_number1
     *
     * @return string
     */
    public function getReferenceNumber1()
    {
        return $this->container['reference_number1'];
    }

    /**
     * Sets reference_number1
     *
     * @param string $reference_number1 main reference number
     *
     * @return self
     */
    public function setReferenceNumber1($reference_number1)
    {
        if (is_null($reference_number1)) {
            throw new \InvalidArgumentException('non-nullable reference_number1 cannot be null');
        }
        $this->container['reference_number1'] = $reference_number1;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id required if you allow duplicate referenceNumber1 to prevent duplicate transactions
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_id cannot be null');
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets reference_number2
     *
     * @return string|null
     */
    public function getReferenceNumber2()
    {
        return $this->container['reference_number2'];
    }

    /**
     * Sets reference_number2
     *
     * @param string|null $reference_number2 alternate reference number or claim number
     *
     * @return self
     */
    public function setReferenceNumber2($reference_number2)
    {
        if (is_null($reference_number2)) {
            throw new \InvalidArgumentException('non-nullable reference_number2 cannot be null');
        }
        $this->container['reference_number2'] = $reference_number2;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string|null
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string|null $shipping_method Method the order will ship |Value|Description| |-------|--------| |null|Customer Default| |1|Ground| |2|2 Day - Allow downgrade to ground if destination is within 2 day ground service area to save money| |6|2 Day - No downgrade to ground service| |3|Next Day - No downgrade to ground service| |7|Next Day - Allow downgrade to ground if destination is within 1 day ground service area to save money| |5|3 Day| |4|Pick-up - must send a requestLocationNumber or the order will default to the accounts home location|
     *
     * @return self
     */
    public function setShippingMethod($shipping_method)
    {
        if (is_null($shipping_method)) {
            throw new \InvalidArgumentException('non-nullable shipping_method cannot be null');
        }
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets shipping_third_party_number
     *
     * @return string|null
     */
    public function getShippingThirdPartyNumber()
    {
        return $this->container['shipping_third_party_number'];
    }

    /**
     * Sets shipping_third_party_number
     *
     * @param string|null $shipping_third_party_number third party shipping account number
     *
     * @return self
     */
    public function setShippingThirdPartyNumber($shipping_third_party_number)
    {
        if (is_null($shipping_third_party_number)) {
            throw new \InvalidArgumentException('non-nullable shipping_third_party_number cannot be null');
        }
        $this->container['shipping_third_party_number'] = $shipping_third_party_number;

        return $this;
    }

    /**
     * Gets shipping_third_party_carrier
     *
     * @return string|null
     */
    public function getShippingThirdPartyCarrier()
    {
        return $this->container['shipping_third_party_carrier'];
    }

    /**
     * Sets shipping_third_party_carrier
     *
     * @param string|null $shipping_third_party_carrier third party shipping carrier _required if you send a shippingThirdPartyNumber_ |Value|Description| |-------|--------| |1|FedEx| |2|UPS|
     *
     * @return self
     */
    public function setShippingThirdPartyCarrier($shipping_third_party_carrier)
    {
        if (is_null($shipping_third_party_carrier)) {
            throw new \InvalidArgumentException('non-nullable shipping_third_party_carrier cannot be null');
        }
        $this->container['shipping_third_party_carrier'] = $shipping_third_party_carrier;

        return $this;
    }

    /**
     * Gets blind_ship
     *
     * @return string|null
     */
    public function getBlindShip()
    {
        return $this->container['blind_ship'];
    }

    /**
     * Sets blind_ship
     *
     * @param string|null $blind_ship request a blind shippment (y/n).  There not be pricing on any communications and it will appear to ship from your company.
     *
     * @return self
     */
    public function setBlindShip($blind_ship)
    {
        if (is_null($blind_ship)) {
            throw new \InvalidArgumentException('non-nullable blind_ship cannot be null');
        }
        $this->container['blind_ship'] = $blind_ship;

        return $this;
    }

    /**
     * Gets residential_address
     *
     * @return string|null
     */
    public function getResidentialAddress()
    {
        return $this->container['residential_address'];
    }

    /**
     * Sets residential_address
     *
     * @param string|null $residential_address residential address (y/n)
     *
     * @return self
     */
    public function setResidentialAddress($residential_address)
    {
        if (is_null($residential_address)) {
            throw new \InvalidArgumentException('non-nullable residential_address cannot be null');
        }
        $this->container['residential_address'] = $residential_address;

        return $this;
    }

    /**
     * Gets require_signature
     *
     * @return string|null
     */
    public function getRequireSignature()
    {
        return $this->container['require_signature'];
    }

    /**
     * Sets require_signature
     *
     * @param string|null $require_signature require signature for delivery (y/n) - additional freight charges will apply
     *
     * @return self
     */
    public function setRequireSignature($require_signature)
    {
        if (is_null($require_signature)) {
            throw new \InvalidArgumentException('non-nullable require_signature cannot be null');
        }
        $this->container['require_signature'] = $require_signature;

        return $this;
    }

    /**
     * Gets ship_complete
     *
     * @return string|null
     */
    public function getShipComplete()
    {
        return $this->container['ship_complete'];
    }

    /**
     * Sets ship_complete
     *
     * @param string|null $ship_complete ship order complete(y/n)
     *
     * @return self
     */
    public function setShipComplete($ship_complete)
    {
        if (is_null($ship_complete)) {
            throw new \InvalidArgumentException('non-nullable ship_complete cannot be null');
        }
        $this->container['ship_complete'] = $ship_complete;

        return $this;
    }

    /**
     * Gets ship_to_address
     *
     * @return \Encompass\SDK\Model\RestfulserviceCreateOrderPostRequestDataShipToAddress
     */
    public function getShipToAddress()
    {
        return $this->container['ship_to_address'];
    }

    /**
     * Sets ship_to_address
     *
     * @param \Encompass\SDK\Model\RestfulserviceCreateOrderPostRequestDataShipToAddress $ship_to_address ship_to_address
     *
     * @return self
     */
    public function setShipToAddress($ship_to_address)
    {
        if (is_null($ship_to_address)) {
            throw new \InvalidArgumentException('non-nullable ship_to_address cannot be null');
        }
        $this->container['ship_to_address'] = $ship_to_address;

        return $this;
    }

    /**
     * Gets request_return_service
     *
     * @return string|null
     */
    public function getRequestReturnService()
    {
        return $this->container['request_return_service'];
    }

    /**
     * Sets request_return_service
     *
     * @param string|null $request_return_service add return service label (y/n) (fees might apply)
     *
     * @return self
     */
    public function setRequestReturnService($request_return_service)
    {
        if (is_null($request_return_service)) {
            throw new \InvalidArgumentException('non-nullable request_return_service cannot be null');
        }
        $this->container['request_return_service'] = $request_return_service;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address address for confirmation email
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        if (is_null($email_address)) {
            throw new \InvalidArgumentException('non-nullable email_address cannot be null');
        }
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets request_location_number
     *
     * @return string|null
     */
    public function getRequestLocationNumber()
    {
        return $this->container['request_location_number'];
    }

    /**
     * Sets request_location_number
     *
     * @param string|null $request_location_number This should only be used to request a specific warehouse location in certain situations such as a pick-up. We normally route order based on availability and distance for the fastest results.  Using this incorrectly could cause order delays and additional freight charges.  If an invalid value is received, it will just be ignored.
     *
     * @return self
     */
    public function setRequestLocationNumber($request_location_number)
    {
        if (is_null($request_location_number)) {
            throw new \InvalidArgumentException('non-nullable request_location_number cannot be null');
        }
        $this->container['request_location_number'] = $request_location_number;

        return $this;
    }

    /**
     * Gets asf_override
     *
     * @return string|null
     */
    public function getAsfOverride()
    {
        return $this->container['asf_override'];
    }

    /**
     * Sets asf_override
     *
     * @param string|null $asf_override Your authorized servicer number should already be on your Encopmpass account.  This can be used to override that number in special cases where you have multiple authorized servicer numbers for multiple locations.
     *
     * @return self
     */
    public function setAsfOverride($asf_override)
    {
        if (is_null($asf_override)) {
            throw new \InvalidArgumentException('non-nullable asf_override cannot be null');
        }
        if ((mb_strlen($asf_override) > 15)) {
            throw new \InvalidArgumentException('invalid length for $asf_override when calling RestfulserviceCreateOrderPostRequestData., must be smaller than or equal to 15.');
        }

        $this->container['asf_override'] = $asf_override;

        return $this;
    }

    /**
     * Gets claim_date
     *
     * @return string|null
     */
    public function getClaimDate()
    {
        return $this->container['claim_date'];
    }

    /**
     * Sets claim_date
     *
     * @param string|null $claim_date date your customers claim was made to you in the format yyyy-mm-dd
     *
     * @return self
     */
    public function setClaimDate($claim_date)
    {
        if (is_null($claim_date)) {
            throw new \InvalidArgumentException('non-nullable claim_date cannot be null');
        }
        $this->container['claim_date'] = $claim_date;

        return $this;
    }

    /**
     * Gets parts
     *
     * @return \Encompass\SDK\Model\RestfulserviceCreateOrderPostRequestDataPartsInner[]
     */
    public function getParts()
    {
        return $this->container['parts'];
    }

    /**
     * Sets parts
     *
     * @param \Encompass\SDK\Model\RestfulserviceCreateOrderPostRequestDataPartsInner[] $parts array of parts to be ordered - Preferred method Send the `basePN` that is returned from our `search` or `partsInformation` service. You can also send the `mfgCode` and `partNumber` as a backup, but it is not required for this method. - Alternative method Do not send the `basePN`, just send the `mfgCode` and `partNumber`.  This prevents issues where multiple manufacruers have the same part number.
     *
     * @return self
     */
    public function setParts($parts)
    {
        if (is_null($parts)) {
            throw new \InvalidArgumentException('non-nullable parts cannot be null');
        }
        $this->container['parts'] = $parts;

        return $this;
    }

    /**
     * Gets custom_order_fields
     *
     * @return \Encompass\SDK\Model\RestfulserviceCreateOrderPostRequestDataPartsInnerCustomPartFieldsInner[]|null
     */
    public function getCustomOrderFields()
    {
        return $this->container['custom_order_fields'];
    }

    /**
     * Sets custom_order_fields
     *
     * @param \Encompass\SDK\Model\RestfulserviceCreateOrderPostRequestDataPartsInnerCustomPartFieldsInner[]|null $custom_order_fields array of values that will be stored at the order level and can be sent back to the customers system.  These values must always be sent in the same order
     *
     * @return self
     */
    public function setCustomOrderFields($custom_order_fields)
    {
        if (is_null($custom_order_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_order_fields cannot be null');
        }
        $this->container['custom_order_fields'] = $custom_order_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


