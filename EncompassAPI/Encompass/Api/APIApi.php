<?php
/**
 * APIApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Encompass Supply Chain Solutions
 *
 * Services require a user name and password that must be obtained from Encompass.  We issue a single set of credentials for all invironments.  Please make sure you are pointing to the correct endpoint described in the __servers__ section.  Services all return the elements `status->errorCode` and `status->errorMessage`.  Successful reqeusts will return a __100__ `errorCode`.   If you have any questions that are not answered here or would like to discuss the overall process, please contact your account rep to schedule a technical call.
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Encompass\SDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Encompass\SDK\ApiException;
use Encompass\SDK\Configuration;
use Encompass\SDK\HeaderSelector;
use Encompass\SDK\ObjectSerializer;

/**
 * APIApi Class Doc Comment
 *
 * @category Class
 * @package  Encompass\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class APIApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restfulserviceBrandListPost' => [
            'application/json',
        ],
        'restfulserviceCreateOrderPost' => [
            'application/json',
        ],
        'restfulserviceExplodedViewListAssembliesPost' => [
            'application/json',
        ],
        'restfulserviceExplodedViewViewAssemblyPost' => [
            'application/json',
        ],
        'restfulserviceFrequentlyPurchasedPartsPost' => [
            'application/json',
        ],
        'restfulserviceModelPartListPost' => [
            'application/json',
        ],
        'restfulservicePartsInformationPost' => [
            'application/json',
        ],
        'restfulserviceSearchPost' => [
            'application/json',
        ],
        'restfulserviceShiptoPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restfulserviceBrandListPost
     *
     * Brand List
     *
     * @param  \Encompass\SDK\Model\RestfulserviceBrandListPostRequest $restfulservice_brand_list_post_request restfulservice_brand_list_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceBrandListPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Encompass\SDK\Model\RestfulserviceBrandListPost200Response|\Encompass\SDK\Model\RestfulserviceBrandListPost400Response
     */
    public function restfulserviceBrandListPost($restfulservice_brand_list_post_request, string $contentType = self::contentTypes['restfulserviceBrandListPost'][0])
    {
        list($response) = $this->restfulserviceBrandListPostWithHttpInfo($restfulservice_brand_list_post_request, $contentType);
        return $response;
    }

    /**
     * Operation restfulserviceBrandListPostWithHttpInfo
     *
     * Brand List
     *
     * @param  \Encompass\SDK\Model\RestfulserviceBrandListPostRequest $restfulservice_brand_list_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceBrandListPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Encompass\SDK\Model\RestfulserviceBrandListPost200Response|\Encompass\SDK\Model\RestfulserviceBrandListPost400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function restfulserviceBrandListPostWithHttpInfo($restfulservice_brand_list_post_request, string $contentType = self::contentTypes['restfulserviceBrandListPost'][0])
    {
        $request = $this->restfulserviceBrandListPostRequest($restfulservice_brand_list_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Encompass\SDK\Model\RestfulserviceBrandListPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceBrandListPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceBrandListPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Encompass\SDK\Model\RestfulserviceBrandListPost400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceBrandListPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceBrandListPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Encompass\SDK\Model\RestfulserviceBrandListPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceBrandListPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceBrandListPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restfulserviceBrandListPostAsync
     *
     * Brand List
     *
     * @param  \Encompass\SDK\Model\RestfulserviceBrandListPostRequest $restfulservice_brand_list_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceBrandListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceBrandListPostAsync($restfulservice_brand_list_post_request, string $contentType = self::contentTypes['restfulserviceBrandListPost'][0])
    {
        return $this->restfulserviceBrandListPostAsyncWithHttpInfo($restfulservice_brand_list_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restfulserviceBrandListPostAsyncWithHttpInfo
     *
     * Brand List
     *
     * @param  \Encompass\SDK\Model\RestfulserviceBrandListPostRequest $restfulservice_brand_list_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceBrandListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceBrandListPostAsyncWithHttpInfo($restfulservice_brand_list_post_request, string $contentType = self::contentTypes['restfulserviceBrandListPost'][0])
    {
        $returnType = '\Encompass\SDK\Model\RestfulserviceBrandListPost200Response';
        $request = $this->restfulserviceBrandListPostRequest($restfulservice_brand_list_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restfulserviceBrandListPost'
     *
     * @param  \Encompass\SDK\Model\RestfulserviceBrandListPostRequest $restfulservice_brand_list_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceBrandListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restfulserviceBrandListPostRequest($restfulservice_brand_list_post_request, string $contentType = self::contentTypes['restfulserviceBrandListPost'][0])
    {

        // verify the required parameter 'restfulservice_brand_list_post_request' is set
        if ($restfulservice_brand_list_post_request === null || (is_array($restfulservice_brand_list_post_request) && count($restfulservice_brand_list_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restfulservice_brand_list_post_request when calling restfulserviceBrandListPost'
            );
        }


        $resourcePath = '/restfulservice/brandList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($restfulservice_brand_list_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($restfulservice_brand_list_post_request));
            } else {
                $httpBody = $restfulservice_brand_list_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restfulserviceCreateOrderPost
     *
     * Create an Order
     *
     * @param  \Encompass\SDK\Model\RestfulserviceCreateOrderPostRequest $restfulservice_create_order_post_request restfulservice_create_order_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceCreateOrderPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Encompass\SDK\Model\RestfulserviceCreateOrderPost200Response|\Encompass\SDK\Model\RestfulserviceCreateOrderPost400Response
     */
    public function restfulserviceCreateOrderPost($restfulservice_create_order_post_request, string $contentType = self::contentTypes['restfulserviceCreateOrderPost'][0])
    {
        list($response) = $this->restfulserviceCreateOrderPostWithHttpInfo($restfulservice_create_order_post_request, $contentType);
        return $response;
    }

    /**
     * Operation restfulserviceCreateOrderPostWithHttpInfo
     *
     * Create an Order
     *
     * @param  \Encompass\SDK\Model\RestfulserviceCreateOrderPostRequest $restfulservice_create_order_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceCreateOrderPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Encompass\SDK\Model\RestfulserviceCreateOrderPost200Response|\Encompass\SDK\Model\RestfulserviceCreateOrderPost400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function restfulserviceCreateOrderPostWithHttpInfo($restfulservice_create_order_post_request, string $contentType = self::contentTypes['restfulserviceCreateOrderPost'][0])
    {
        $request = $this->restfulserviceCreateOrderPostRequest($restfulservice_create_order_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Encompass\SDK\Model\RestfulserviceCreateOrderPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceCreateOrderPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceCreateOrderPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Encompass\SDK\Model\RestfulserviceCreateOrderPost400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceCreateOrderPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceCreateOrderPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Encompass\SDK\Model\RestfulserviceCreateOrderPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceCreateOrderPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceCreateOrderPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restfulserviceCreateOrderPostAsync
     *
     * Create an Order
     *
     * @param  \Encompass\SDK\Model\RestfulserviceCreateOrderPostRequest $restfulservice_create_order_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceCreateOrderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceCreateOrderPostAsync($restfulservice_create_order_post_request, string $contentType = self::contentTypes['restfulserviceCreateOrderPost'][0])
    {
        return $this->restfulserviceCreateOrderPostAsyncWithHttpInfo($restfulservice_create_order_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restfulserviceCreateOrderPostAsyncWithHttpInfo
     *
     * Create an Order
     *
     * @param  \Encompass\SDK\Model\RestfulserviceCreateOrderPostRequest $restfulservice_create_order_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceCreateOrderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceCreateOrderPostAsyncWithHttpInfo($restfulservice_create_order_post_request, string $contentType = self::contentTypes['restfulserviceCreateOrderPost'][0])
    {
        $returnType = '\Encompass\SDK\Model\RestfulserviceCreateOrderPost200Response';
        $request = $this->restfulserviceCreateOrderPostRequest($restfulservice_create_order_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restfulserviceCreateOrderPost'
     *
     * @param  \Encompass\SDK\Model\RestfulserviceCreateOrderPostRequest $restfulservice_create_order_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceCreateOrderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restfulserviceCreateOrderPostRequest($restfulservice_create_order_post_request, string $contentType = self::contentTypes['restfulserviceCreateOrderPost'][0])
    {

        // verify the required parameter 'restfulservice_create_order_post_request' is set
        if ($restfulservice_create_order_post_request === null || (is_array($restfulservice_create_order_post_request) && count($restfulservice_create_order_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restfulservice_create_order_post_request when calling restfulserviceCreateOrderPost'
            );
        }


        $resourcePath = '/restfulservice/createOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($restfulservice_create_order_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($restfulservice_create_order_post_request));
            } else {
                $httpBody = $restfulservice_create_order_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restfulserviceExplodedViewListAssembliesPost
     *
     * View assemblies list for interactive exploded views
     *
     * @param  \Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPostRequest $restfulservice_exploded_view_list_assemblies_post_request restfulservice_exploded_view_list_assemblies_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceExplodedViewListAssembliesPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost200Response|\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost400Response
     */
    public function restfulserviceExplodedViewListAssembliesPost($restfulservice_exploded_view_list_assemblies_post_request, string $contentType = self::contentTypes['restfulserviceExplodedViewListAssembliesPost'][0])
    {
        list($response) = $this->restfulserviceExplodedViewListAssembliesPostWithHttpInfo($restfulservice_exploded_view_list_assemblies_post_request, $contentType);
        return $response;
    }

    /**
     * Operation restfulserviceExplodedViewListAssembliesPostWithHttpInfo
     *
     * View assemblies list for interactive exploded views
     *
     * @param  \Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPostRequest $restfulservice_exploded_view_list_assemblies_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceExplodedViewListAssembliesPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost200Response|\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function restfulserviceExplodedViewListAssembliesPostWithHttpInfo($restfulservice_exploded_view_list_assemblies_post_request, string $contentType = self::contentTypes['restfulserviceExplodedViewListAssembliesPost'][0])
    {
        $request = $this->restfulserviceExplodedViewListAssembliesPostRequest($restfulservice_exploded_view_list_assemblies_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restfulserviceExplodedViewListAssembliesPostAsync
     *
     * View assemblies list for interactive exploded views
     *
     * @param  \Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPostRequest $restfulservice_exploded_view_list_assemblies_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceExplodedViewListAssembliesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceExplodedViewListAssembliesPostAsync($restfulservice_exploded_view_list_assemblies_post_request, string $contentType = self::contentTypes['restfulserviceExplodedViewListAssembliesPost'][0])
    {
        return $this->restfulserviceExplodedViewListAssembliesPostAsyncWithHttpInfo($restfulservice_exploded_view_list_assemblies_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restfulserviceExplodedViewListAssembliesPostAsyncWithHttpInfo
     *
     * View assemblies list for interactive exploded views
     *
     * @param  \Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPostRequest $restfulservice_exploded_view_list_assemblies_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceExplodedViewListAssembliesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceExplodedViewListAssembliesPostAsyncWithHttpInfo($restfulservice_exploded_view_list_assemblies_post_request, string $contentType = self::contentTypes['restfulserviceExplodedViewListAssembliesPost'][0])
    {
        $returnType = '\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost200Response';
        $request = $this->restfulserviceExplodedViewListAssembliesPostRequest($restfulservice_exploded_view_list_assemblies_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restfulserviceExplodedViewListAssembliesPost'
     *
     * @param  \Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPostRequest $restfulservice_exploded_view_list_assemblies_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceExplodedViewListAssembliesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restfulserviceExplodedViewListAssembliesPostRequest($restfulservice_exploded_view_list_assemblies_post_request, string $contentType = self::contentTypes['restfulserviceExplodedViewListAssembliesPost'][0])
    {

        // verify the required parameter 'restfulservice_exploded_view_list_assemblies_post_request' is set
        if ($restfulservice_exploded_view_list_assemblies_post_request === null || (is_array($restfulservice_exploded_view_list_assemblies_post_request) && count($restfulservice_exploded_view_list_assemblies_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restfulservice_exploded_view_list_assemblies_post_request when calling restfulserviceExplodedViewListAssembliesPost'
            );
        }


        $resourcePath = '/restfulservice/explodedView/listAssemblies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($restfulservice_exploded_view_list_assemblies_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($restfulservice_exploded_view_list_assemblies_post_request));
            } else {
                $httpBody = $restfulservice_exploded_view_list_assemblies_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restfulserviceExplodedViewViewAssemblyPost
     *
     * View assembly for interactive exploded views.
     *
     * @param  \Encompass\SDK\Model\RestfulserviceExplodedViewViewAssemblyPostRequest $restfulservice_exploded_view_view_assembly_post_request restfulservice_exploded_view_view_assembly_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceExplodedViewViewAssemblyPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Encompass\SDK\Model\RestfulserviceExplodedViewViewAssemblyPost200Response|\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost400Response
     */
    public function restfulserviceExplodedViewViewAssemblyPost($restfulservice_exploded_view_view_assembly_post_request, string $contentType = self::contentTypes['restfulserviceExplodedViewViewAssemblyPost'][0])
    {
        list($response) = $this->restfulserviceExplodedViewViewAssemblyPostWithHttpInfo($restfulservice_exploded_view_view_assembly_post_request, $contentType);
        return $response;
    }

    /**
     * Operation restfulserviceExplodedViewViewAssemblyPostWithHttpInfo
     *
     * View assembly for interactive exploded views.
     *
     * @param  \Encompass\SDK\Model\RestfulserviceExplodedViewViewAssemblyPostRequest $restfulservice_exploded_view_view_assembly_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceExplodedViewViewAssemblyPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Encompass\SDK\Model\RestfulserviceExplodedViewViewAssemblyPost200Response|\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function restfulserviceExplodedViewViewAssemblyPostWithHttpInfo($restfulservice_exploded_view_view_assembly_post_request, string $contentType = self::contentTypes['restfulserviceExplodedViewViewAssemblyPost'][0])
    {
        $request = $this->restfulserviceExplodedViewViewAssemblyPostRequest($restfulservice_exploded_view_view_assembly_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Encompass\SDK\Model\RestfulserviceExplodedViewViewAssemblyPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceExplodedViewViewAssemblyPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceExplodedViewViewAssemblyPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Encompass\SDK\Model\RestfulserviceExplodedViewViewAssemblyPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceExplodedViewViewAssemblyPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceExplodedViewListAssembliesPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restfulserviceExplodedViewViewAssemblyPostAsync
     *
     * View assembly for interactive exploded views.
     *
     * @param  \Encompass\SDK\Model\RestfulserviceExplodedViewViewAssemblyPostRequest $restfulservice_exploded_view_view_assembly_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceExplodedViewViewAssemblyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceExplodedViewViewAssemblyPostAsync($restfulservice_exploded_view_view_assembly_post_request, string $contentType = self::contentTypes['restfulserviceExplodedViewViewAssemblyPost'][0])
    {
        return $this->restfulserviceExplodedViewViewAssemblyPostAsyncWithHttpInfo($restfulservice_exploded_view_view_assembly_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restfulserviceExplodedViewViewAssemblyPostAsyncWithHttpInfo
     *
     * View assembly for interactive exploded views.
     *
     * @param  \Encompass\SDK\Model\RestfulserviceExplodedViewViewAssemblyPostRequest $restfulservice_exploded_view_view_assembly_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceExplodedViewViewAssemblyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceExplodedViewViewAssemblyPostAsyncWithHttpInfo($restfulservice_exploded_view_view_assembly_post_request, string $contentType = self::contentTypes['restfulserviceExplodedViewViewAssemblyPost'][0])
    {
        $returnType = '\Encompass\SDK\Model\RestfulserviceExplodedViewViewAssemblyPost200Response';
        $request = $this->restfulserviceExplodedViewViewAssemblyPostRequest($restfulservice_exploded_view_view_assembly_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restfulserviceExplodedViewViewAssemblyPost'
     *
     * @param  \Encompass\SDK\Model\RestfulserviceExplodedViewViewAssemblyPostRequest $restfulservice_exploded_view_view_assembly_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceExplodedViewViewAssemblyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restfulserviceExplodedViewViewAssemblyPostRequest($restfulservice_exploded_view_view_assembly_post_request, string $contentType = self::contentTypes['restfulserviceExplodedViewViewAssemblyPost'][0])
    {

        // verify the required parameter 'restfulservice_exploded_view_view_assembly_post_request' is set
        if ($restfulservice_exploded_view_view_assembly_post_request === null || (is_array($restfulservice_exploded_view_view_assembly_post_request) && count($restfulservice_exploded_view_view_assembly_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restfulservice_exploded_view_view_assembly_post_request when calling restfulserviceExplodedViewViewAssemblyPost'
            );
        }


        $resourcePath = '/restfulservice/explodedView/viewAssembly';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($restfulservice_exploded_view_view_assembly_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($restfulservice_exploded_view_view_assembly_post_request));
            } else {
                $httpBody = $restfulservice_exploded_view_view_assembly_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restfulserviceFrequentlyPurchasedPartsPost
     *
     * Frequently Purchased Parts
     *
     * @param  \Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPostRequest $restfulservice_frequently_purchased_parts_post_request restfulservice_frequently_purchased_parts_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceFrequentlyPurchasedPartsPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPost200Response|\Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPost400Response
     */
    public function restfulserviceFrequentlyPurchasedPartsPost($restfulservice_frequently_purchased_parts_post_request, string $contentType = self::contentTypes['restfulserviceFrequentlyPurchasedPartsPost'][0])
    {
        list($response) = $this->restfulserviceFrequentlyPurchasedPartsPostWithHttpInfo($restfulservice_frequently_purchased_parts_post_request, $contentType);
        return $response;
    }

    /**
     * Operation restfulserviceFrequentlyPurchasedPartsPostWithHttpInfo
     *
     * Frequently Purchased Parts
     *
     * @param  \Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPostRequest $restfulservice_frequently_purchased_parts_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceFrequentlyPurchasedPartsPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPost200Response|\Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPost400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function restfulserviceFrequentlyPurchasedPartsPostWithHttpInfo($restfulservice_frequently_purchased_parts_post_request, string $contentType = self::contentTypes['restfulserviceFrequentlyPurchasedPartsPost'][0])
    {
        $request = $this->restfulserviceFrequentlyPurchasedPartsPostRequest($restfulservice_frequently_purchased_parts_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPost400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restfulserviceFrequentlyPurchasedPartsPostAsync
     *
     * Frequently Purchased Parts
     *
     * @param  \Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPostRequest $restfulservice_frequently_purchased_parts_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceFrequentlyPurchasedPartsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceFrequentlyPurchasedPartsPostAsync($restfulservice_frequently_purchased_parts_post_request, string $contentType = self::contentTypes['restfulserviceFrequentlyPurchasedPartsPost'][0])
    {
        return $this->restfulserviceFrequentlyPurchasedPartsPostAsyncWithHttpInfo($restfulservice_frequently_purchased_parts_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restfulserviceFrequentlyPurchasedPartsPostAsyncWithHttpInfo
     *
     * Frequently Purchased Parts
     *
     * @param  \Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPostRequest $restfulservice_frequently_purchased_parts_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceFrequentlyPurchasedPartsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceFrequentlyPurchasedPartsPostAsyncWithHttpInfo($restfulservice_frequently_purchased_parts_post_request, string $contentType = self::contentTypes['restfulserviceFrequentlyPurchasedPartsPost'][0])
    {
        $returnType = '\Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPost200Response';
        $request = $this->restfulserviceFrequentlyPurchasedPartsPostRequest($restfulservice_frequently_purchased_parts_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restfulserviceFrequentlyPurchasedPartsPost'
     *
     * @param  \Encompass\SDK\Model\RestfulserviceFrequentlyPurchasedPartsPostRequest $restfulservice_frequently_purchased_parts_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceFrequentlyPurchasedPartsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restfulserviceFrequentlyPurchasedPartsPostRequest($restfulservice_frequently_purchased_parts_post_request, string $contentType = self::contentTypes['restfulserviceFrequentlyPurchasedPartsPost'][0])
    {

        // verify the required parameter 'restfulservice_frequently_purchased_parts_post_request' is set
        if ($restfulservice_frequently_purchased_parts_post_request === null || (is_array($restfulservice_frequently_purchased_parts_post_request) && count($restfulservice_frequently_purchased_parts_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restfulservice_frequently_purchased_parts_post_request when calling restfulserviceFrequentlyPurchasedPartsPost'
            );
        }


        $resourcePath = '/restfulservice/frequentlyPurchasedParts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($restfulservice_frequently_purchased_parts_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($restfulservice_frequently_purchased_parts_post_request));
            } else {
                $httpBody = $restfulservice_frequently_purchased_parts_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restfulserviceModelPartListPost
     *
     * Model Part List
     *
     * @param  \Encompass\SDK\Model\RestfulserviceModelPartListPostRequest $restfulservice_model_part_list_post_request restfulservice_model_part_list_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceModelPartListPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Encompass\SDK\Model\RestfulserviceModelPartListPost200Response|\Encompass\SDK\Model\RestfulserviceModelPartListPost400Response|\Encompass\SDK\Model\RestfulserviceModelPartListPost452Response
     */
    public function restfulserviceModelPartListPost($restfulservice_model_part_list_post_request, string $contentType = self::contentTypes['restfulserviceModelPartListPost'][0])
    {
        list($response) = $this->restfulserviceModelPartListPostWithHttpInfo($restfulservice_model_part_list_post_request, $contentType);
        return $response;
    }

    /**
     * Operation restfulserviceModelPartListPostWithHttpInfo
     *
     * Model Part List
     *
     * @param  \Encompass\SDK\Model\RestfulserviceModelPartListPostRequest $restfulservice_model_part_list_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceModelPartListPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Encompass\SDK\Model\RestfulserviceModelPartListPost200Response|\Encompass\SDK\Model\RestfulserviceModelPartListPost400Response|\Encompass\SDK\Model\RestfulserviceModelPartListPost452Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function restfulserviceModelPartListPostWithHttpInfo($restfulservice_model_part_list_post_request, string $contentType = self::contentTypes['restfulserviceModelPartListPost'][0])
    {
        $request = $this->restfulserviceModelPartListPostRequest($restfulservice_model_part_list_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Encompass\SDK\Model\RestfulserviceModelPartListPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceModelPartListPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceModelPartListPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Encompass\SDK\Model\RestfulserviceModelPartListPost400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceModelPartListPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceModelPartListPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 452:
                    if ('\Encompass\SDK\Model\RestfulserviceModelPartListPost452Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceModelPartListPost452Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceModelPartListPost452Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Encompass\SDK\Model\RestfulserviceModelPartListPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceModelPartListPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceModelPartListPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 452:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceModelPartListPost452Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restfulserviceModelPartListPostAsync
     *
     * Model Part List
     *
     * @param  \Encompass\SDK\Model\RestfulserviceModelPartListPostRequest $restfulservice_model_part_list_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceModelPartListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceModelPartListPostAsync($restfulservice_model_part_list_post_request, string $contentType = self::contentTypes['restfulserviceModelPartListPost'][0])
    {
        return $this->restfulserviceModelPartListPostAsyncWithHttpInfo($restfulservice_model_part_list_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restfulserviceModelPartListPostAsyncWithHttpInfo
     *
     * Model Part List
     *
     * @param  \Encompass\SDK\Model\RestfulserviceModelPartListPostRequest $restfulservice_model_part_list_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceModelPartListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceModelPartListPostAsyncWithHttpInfo($restfulservice_model_part_list_post_request, string $contentType = self::contentTypes['restfulserviceModelPartListPost'][0])
    {
        $returnType = '\Encompass\SDK\Model\RestfulserviceModelPartListPost200Response';
        $request = $this->restfulserviceModelPartListPostRequest($restfulservice_model_part_list_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restfulserviceModelPartListPost'
     *
     * @param  \Encompass\SDK\Model\RestfulserviceModelPartListPostRequest $restfulservice_model_part_list_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceModelPartListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restfulserviceModelPartListPostRequest($restfulservice_model_part_list_post_request, string $contentType = self::contentTypes['restfulserviceModelPartListPost'][0])
    {

        // verify the required parameter 'restfulservice_model_part_list_post_request' is set
        if ($restfulservice_model_part_list_post_request === null || (is_array($restfulservice_model_part_list_post_request) && count($restfulservice_model_part_list_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restfulservice_model_part_list_post_request when calling restfulserviceModelPartListPost'
            );
        }


        $resourcePath = '/restfulservice/modelPartList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($restfulservice_model_part_list_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($restfulservice_model_part_list_post_request));
            } else {
                $httpBody = $restfulservice_model_part_list_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restfulservicePartsInformationPost
     *
     * Parts Information
     *
     * @param  \Encompass\SDK\Model\RestfulservicePartsInformationPostRequest $restfulservice_parts_information_post_request restfulservice_parts_information_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulservicePartsInformationPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Encompass\SDK\Model\RestfulservicePartsInformationPost200Response|\Encompass\SDK\Model\RestfulservicePartsInformationPost400Response
     */
    public function restfulservicePartsInformationPost($restfulservice_parts_information_post_request, string $contentType = self::contentTypes['restfulservicePartsInformationPost'][0])
    {
        list($response) = $this->restfulservicePartsInformationPostWithHttpInfo($restfulservice_parts_information_post_request, $contentType);
        return $response;
    }

    /**
     * Operation restfulservicePartsInformationPostWithHttpInfo
     *
     * Parts Information
     *
     * @param  \Encompass\SDK\Model\RestfulservicePartsInformationPostRequest $restfulservice_parts_information_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulservicePartsInformationPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Encompass\SDK\Model\RestfulservicePartsInformationPost200Response|\Encompass\SDK\Model\RestfulservicePartsInformationPost400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function restfulservicePartsInformationPostWithHttpInfo($restfulservice_parts_information_post_request, string $contentType = self::contentTypes['restfulservicePartsInformationPost'][0])
    {
        $request = $this->restfulservicePartsInformationPostRequest($restfulservice_parts_information_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Encompass\SDK\Model\RestfulservicePartsInformationPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulservicePartsInformationPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulservicePartsInformationPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Encompass\SDK\Model\RestfulservicePartsInformationPost400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulservicePartsInformationPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulservicePartsInformationPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Encompass\SDK\Model\RestfulservicePartsInformationPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulservicePartsInformationPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulservicePartsInformationPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restfulservicePartsInformationPostAsync
     *
     * Parts Information
     *
     * @param  \Encompass\SDK\Model\RestfulservicePartsInformationPostRequest $restfulservice_parts_information_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulservicePartsInformationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulservicePartsInformationPostAsync($restfulservice_parts_information_post_request, string $contentType = self::contentTypes['restfulservicePartsInformationPost'][0])
    {
        return $this->restfulservicePartsInformationPostAsyncWithHttpInfo($restfulservice_parts_information_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restfulservicePartsInformationPostAsyncWithHttpInfo
     *
     * Parts Information
     *
     * @param  \Encompass\SDK\Model\RestfulservicePartsInformationPostRequest $restfulservice_parts_information_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulservicePartsInformationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulservicePartsInformationPostAsyncWithHttpInfo($restfulservice_parts_information_post_request, string $contentType = self::contentTypes['restfulservicePartsInformationPost'][0])
    {
        $returnType = '\Encompass\SDK\Model\RestfulservicePartsInformationPost200Response';
        $request = $this->restfulservicePartsInformationPostRequest($restfulservice_parts_information_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restfulservicePartsInformationPost'
     *
     * @param  \Encompass\SDK\Model\RestfulservicePartsInformationPostRequest $restfulservice_parts_information_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulservicePartsInformationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restfulservicePartsInformationPostRequest($restfulservice_parts_information_post_request, string $contentType = self::contentTypes['restfulservicePartsInformationPost'][0])
    {

        // verify the required parameter 'restfulservice_parts_information_post_request' is set
        if ($restfulservice_parts_information_post_request === null || (is_array($restfulservice_parts_information_post_request) && count($restfulservice_parts_information_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restfulservice_parts_information_post_request when calling restfulservicePartsInformationPost'
            );
        }


        $resourcePath = '/restfulservice/partsInformation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($restfulservice_parts_information_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($restfulservice_parts_information_post_request));
            } else {
                $httpBody = $restfulservice_parts_information_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restfulserviceSearchPost
     *
     * Search
     *
     * @param  \Encompass\SDK\Model\RestfulserviceSearchPostRequest $restfulservice_search_post_request restfulservice_search_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceSearchPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Encompass\SDK\Model\RestfulserviceSearchPost200Response|\Encompass\SDK\Model\RestfulserviceSearchPost400Response
     */
    public function restfulserviceSearchPost($restfulservice_search_post_request, string $contentType = self::contentTypes['restfulserviceSearchPost'][0])
    {
        list($response) = $this->restfulserviceSearchPostWithHttpInfo($restfulservice_search_post_request, $contentType);
        return $response;
    }

    /**
     * Operation restfulserviceSearchPostWithHttpInfo
     *
     * Search
     *
     * @param  \Encompass\SDK\Model\RestfulserviceSearchPostRequest $restfulservice_search_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceSearchPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Encompass\SDK\Model\RestfulserviceSearchPost200Response|\Encompass\SDK\Model\RestfulserviceSearchPost400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function restfulserviceSearchPostWithHttpInfo($restfulservice_search_post_request, string $contentType = self::contentTypes['restfulserviceSearchPost'][0])
    {
        $request = $this->restfulserviceSearchPostRequest($restfulservice_search_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Encompass\SDK\Model\RestfulserviceSearchPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceSearchPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceSearchPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Encompass\SDK\Model\RestfulserviceSearchPost400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceSearchPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceSearchPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Encompass\SDK\Model\RestfulserviceSearchPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceSearchPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceSearchPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restfulserviceSearchPostAsync
     *
     * Search
     *
     * @param  \Encompass\SDK\Model\RestfulserviceSearchPostRequest $restfulservice_search_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceSearchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceSearchPostAsync($restfulservice_search_post_request, string $contentType = self::contentTypes['restfulserviceSearchPost'][0])
    {
        return $this->restfulserviceSearchPostAsyncWithHttpInfo($restfulservice_search_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restfulserviceSearchPostAsyncWithHttpInfo
     *
     * Search
     *
     * @param  \Encompass\SDK\Model\RestfulserviceSearchPostRequest $restfulservice_search_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceSearchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceSearchPostAsyncWithHttpInfo($restfulservice_search_post_request, string $contentType = self::contentTypes['restfulserviceSearchPost'][0])
    {
        $returnType = '\Encompass\SDK\Model\RestfulserviceSearchPost200Response';
        $request = $this->restfulserviceSearchPostRequest($restfulservice_search_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restfulserviceSearchPost'
     *
     * @param  \Encompass\SDK\Model\RestfulserviceSearchPostRequest $restfulservice_search_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceSearchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restfulserviceSearchPostRequest($restfulservice_search_post_request, string $contentType = self::contentTypes['restfulserviceSearchPost'][0])
    {

        // verify the required parameter 'restfulservice_search_post_request' is set
        if ($restfulservice_search_post_request === null || (is_array($restfulservice_search_post_request) && count($restfulservice_search_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restfulservice_search_post_request when calling restfulserviceSearchPost'
            );
        }


        $resourcePath = '/restfulservice/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($restfulservice_search_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($restfulservice_search_post_request));
            } else {
                $httpBody = $restfulservice_search_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restfulserviceShiptoPost
     *
     * Customer Ship To list
     *
     * @param  \Encompass\SDK\Model\RestfulserviceShiptoPostRequest $restfulservice_shipto_post_request restfulservice_shipto_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceShiptoPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Encompass\SDK\Model\RestfulserviceShiptoPost200Response|\Encompass\SDK\Model\RestfulserviceBrandListPost400Response
     */
    public function restfulserviceShiptoPost($restfulservice_shipto_post_request, string $contentType = self::contentTypes['restfulserviceShiptoPost'][0])
    {
        list($response) = $this->restfulserviceShiptoPostWithHttpInfo($restfulservice_shipto_post_request, $contentType);
        return $response;
    }

    /**
     * Operation restfulserviceShiptoPostWithHttpInfo
     *
     * Customer Ship To list
     *
     * @param  \Encompass\SDK\Model\RestfulserviceShiptoPostRequest $restfulservice_shipto_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceShiptoPost'] to see the possible values for this operation
     *
     * @throws \Encompass\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Encompass\SDK\Model\RestfulserviceShiptoPost200Response|\Encompass\SDK\Model\RestfulserviceBrandListPost400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function restfulserviceShiptoPostWithHttpInfo($restfulservice_shipto_post_request, string $contentType = self::contentTypes['restfulserviceShiptoPost'][0])
    {
        $request = $this->restfulserviceShiptoPostRequest($restfulservice_shipto_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Encompass\SDK\Model\RestfulserviceShiptoPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceShiptoPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceShiptoPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Encompass\SDK\Model\RestfulserviceBrandListPost400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Encompass\SDK\Model\RestfulserviceBrandListPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Encompass\SDK\Model\RestfulserviceBrandListPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Encompass\SDK\Model\RestfulserviceShiptoPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceShiptoPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Encompass\SDK\Model\RestfulserviceBrandListPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restfulserviceShiptoPostAsync
     *
     * Customer Ship To list
     *
     * @param  \Encompass\SDK\Model\RestfulserviceShiptoPostRequest $restfulservice_shipto_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceShiptoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceShiptoPostAsync($restfulservice_shipto_post_request, string $contentType = self::contentTypes['restfulserviceShiptoPost'][0])
    {
        return $this->restfulserviceShiptoPostAsyncWithHttpInfo($restfulservice_shipto_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restfulserviceShiptoPostAsyncWithHttpInfo
     *
     * Customer Ship To list
     *
     * @param  \Encompass\SDK\Model\RestfulserviceShiptoPostRequest $restfulservice_shipto_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceShiptoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restfulserviceShiptoPostAsyncWithHttpInfo($restfulservice_shipto_post_request, string $contentType = self::contentTypes['restfulserviceShiptoPost'][0])
    {
        $returnType = '\Encompass\SDK\Model\RestfulserviceShiptoPost200Response';
        $request = $this->restfulserviceShiptoPostRequest($restfulservice_shipto_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restfulserviceShiptoPost'
     *
     * @param  \Encompass\SDK\Model\RestfulserviceShiptoPostRequest $restfulservice_shipto_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restfulserviceShiptoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restfulserviceShiptoPostRequest($restfulservice_shipto_post_request, string $contentType = self::contentTypes['restfulserviceShiptoPost'][0])
    {

        // verify the required parameter 'restfulservice_shipto_post_request' is set
        if ($restfulservice_shipto_post_request === null || (is_array($restfulservice_shipto_post_request) && count($restfulservice_shipto_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restfulservice_shipto_post_request when calling restfulserviceShiptoPost'
            );
        }


        $resourcePath = '/restfulservice/shipto';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($restfulservice_shipto_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($restfulservice_shipto_post_request));
            } else {
                $httpBody = $restfulservice_shipto_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
